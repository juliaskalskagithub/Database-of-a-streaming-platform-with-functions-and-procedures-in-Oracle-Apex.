CREATE TABLE a_f ( 
    aktorzy_id_aktora      INTEGER NOT NULL, 
    filmy_i_seriale_id_f_s INTEGER NOT NULL 
);

ALTER TABLE a_f ADD CONSTRAINT a_f_pk PRIMARY KEY ( aktorzy_id_aktora, 
                                                    filmy_i_seriale_id_f_s );

CREATE  TABLE administrator ( 
    id_administratora  INTEGER NOT NULL, 
    imie               VARCHAR2(40 CHAR), 
    nazwisko           VARCHAR2(80 CHAR), 
    nr_telefonu        INTEGER, 
    email              VARCHAR2(80 CHAR), 
    adres_kod_pocztowy VARCHAR2(50 CHAR) NOT NULL, 
    ulica              VARCHAR2(30 CHAR) );

ALTER TABLE administrator ADD CONSTRAINT administrator_pk PRIMARY KEY ( id_administratora );

CREATE TABLE adres ( 
    kod_pocztowy VARCHAR2(50 CHAR) NOT NULL, 
    miejscowosc  VARCHAR2(30 CHAR), 
    wojewodztwo  VARCHAR2(30 CHAR) 
);

ALTER TABLE adres ADD CONSTRAINT adres_pk PRIMARY KEY ( kod_pocztowy );

CREATE TABLE aktorzy ( 
    id_aktora        INTEGER NOT NULL, 
    imie             VARCHAR2(40 CHAR), 
    nazwisko         VARCHAR2(80 CHAR), 
    wiek             INTEGER, 
    kraj_pochodzenia VARCHAR2(80 CHAR) 
);

ALTER TABLE aktorzy ADD CONSTRAINT aktorzy_pk PRIMARY KEY ( id_aktora );

CREATE TABLE f_r ( 
    filmy_i_seriale_id_f_s INTEGER NOT NULL, 
    rezyser_id_rezysera    INTEGER NOT NULL 
);

ALTER TABLE f_r ADD CONSTRAINT f_r_pk PRIMARY KEY ( filmy_i_seriale_id_f_s, 
                                                    rezyser_id_rezysera );

CREATE TABLE filmy_i_seriale ( 
    id_f_s                   INTEGER NOT NULL, 
    tytul                    VARCHAR2(60 CHAR), 
    opis                     VARCHAR2(1000 CHAR), 
    cena                     INTEGER, 
    gatunek_id_gatunku       INTEGER NOT NULL, 
    typ_filmu_i_serialu_id_t INTEGER NOT NULL, 
    kraj_produkcji_id_kraju  INTEGER NOT NULL, 
    administrator_id_a       INTEGER NOT NULL, 
    pakiety_id_pakietu       INTEGER NOT NULL 
);

ALTER TABLE filmy_i_seriale ADD CONSTRAINT filmy_i_seriale_pk PRIMARY KEY ( id_f_s );

CREATE TABLE gatunek ( 
    id_gatunku INTEGER NOT NULL, 
    nazwa      VARCHAR2(100 CHAR) ,
    wiek_ograniczenia INTEGER
);


ALTER TABLE gatunek ADD CONSTRAINT gatunek_pk PRIMARY KEY ( id_gatunku );

CREATE TABLE kraj_produkcji ( 
    id_kraju INTEGER NOT NULL, 
    nazwa    VARCHAR2(80 CHAR) 
);

ALTER TABLE kraj_produkcji ADD CONSTRAINT kraj_produkcji_pk PRIMARY KEY ( id_kraju );

CREATE TABLE pakiety ( 
    id_pakietu INTEGER NOT NULL, 
    nazwa      VARCHAR2(40 CHAR), 
    cena       INTEGER 
);

ALTER TABLE pakiety ADD CONSTRAINT pakiety_pk PRIMARY KEY ( id_pakietu );

CREATE TABLE recenzja_filmu_i_serialu ( 
    id_recenzji            INTEGER NOT NULL, 
    opis                   VARCHAR2(1000 CHAR), 
    klient_id_klienta      INTEGER, 
    filmy_i_seriale_id_f_s INTEGER, 
    ocena                  INTEGER, 
    data_recenzji          DATE 
);

ALTER TABLE recenzja_filmu_i_serialu ADD CONSTRAINT recenzja_filmu_i_serialu_pk PRIMARY KEY ( id_recenzji );

CREATE TABLE rezyser ( 
    id_rezysera      INTEGER NOT NULL, 
    imie             VARCHAR2(40 CHAR), 
    nazwisko         VARCHAR2(80 CHAR), 
    wiek             INTEGER, 
    kraj_pochodzenia VARCHAR2(80 CHAR) 
);

ALTER TABLE rezyser ADD CONSTRAINT rezyser_pk PRIMARY KEY ( id_rezysera );

CREATE TABLE rodzaj_platnosci ( 
    id_platnosci INTEGER NOT NULL, 
    rodzaj       VARCHAR2(30 CHAR) 
);

ALTER TABLE rodzaj_platnosci ADD CONSTRAINT rodzaj_platnosci_pk PRIMARY KEY ( id_platnosci );

CREATE TABLE transakcje ( 
    id_transakcji     INTEGER NOT NULL, 
    umowy_id_umowy    INTEGER, 
    wypozyczenia_id_w INTEGER 
);

CREATE UNIQUE INDEX transakcje__idx ON 
    transakcje ( 
        umowy_id_umowy 
    ASC );

CREATE UNIQUE INDEX transakcje__idxv1 ON 
    transakcje ( 
        wypozyczenia_id_w 
    ASC );

ALTER TABLE transakcje ADD CONSTRAINT transakcje_pk PRIMARY KEY ( id_transakcji );

CREATE TABLE typ_filmu_i_serialu ( 
    id_typow INTEGER NOT NULL, 
    nazwa    VARCHAR2(80 CHAR) 
);

ALTER TABLE typ_filmu_i_serialu ADD CONSTRAINT typ_filmu_i_serialu_pk PRIMARY KEY ( id_typow );

CREATE TABLE umowy ( 
    id_umowy              INTEGER NOT NULL, 
    klient_id_klienta     INTEGER NOT NULL, 
    administrator_id_a    INTEGER NOT NULL, 
    data_zawarcia_umowy   DATE, 
    kwota_koncowa         INTEGER, 
    pakiety_id_pakietu    INTEGER NOT NULL, 
    rodzaj_platnosci_id_p INTEGER NOT NULL 
);

CREATE UNIQUE INDEX umowy__idx ON 
    umowy ( 
        klient_id_klienta 
    ASC );

ALTER TABLE umowy ADD CONSTRAINT umowy_pk PRIMARY KEY ( id_umowy );

CREATE TABLE wypozyczenia ( 
    id_wypozyczenia        INTEGER NOT NULL, 
    klient_id_klienta      INTEGER NOT NULL, 
    administrator_id_ad    INTEGER NOT NULL, 
    filmy_i_seriale_id_f_s INTEGER NOT NULL, 
    data_wypozyczenia      DATE, 
    data_oddania	   DATE,
    kwota_koncowa          INTEGER, 
    rodzaj_platnosci_id_p  INTEGER NOT NULL 
);

CREATE TABLE klient ( 
    id_klienta         INTEGER NOT NULL, 
    imie               VARCHAR2(40 CHAR), 
    nazwisko           VARCHAR2(80 CHAR), 
    wiek               INTEGER, 
    nr_telefonu        INTEGER, 
    email              VARCHAR2(50 CHAR), 
    haslo              VARCHAR2(50 CHAR), 
    ulica              VARCHAR2(30 CHAR), 
    adres_kod_pocztowy VARCHAR2(50 CHAR) NOT NULL,
    id_pakietu         INTEGER,  -- Added column for the foreign key

    CONSTRAINT klient_pk PRIMARY KEY (id_klienta),
    CONSTRAINT klient_adres_fk FOREIGN KEY (adres_kod_pocztowy) REFERENCES adres (kod_pocztowy),
    CONSTRAINT klient_pakiet_fk FOREIGN KEY (id_pakietu) REFERENCES pakiety (id_pakietu)
);



ALTER TABLE wypozyczenia ADD CONSTRAINT wypozyczenia_pk PRIMARY KEY ( id_wypozyczenia );

ALTER TABLE a_f 
    ADD CONSTRAINT a_f_aktorzy_fk FOREIGN KEY ( aktorzy_id_aktora ) 
        REFERENCES aktorzy ( id_aktora );

ALTER TABLE a_f 
    ADD CONSTRAINT a_f_filmy_i_seriale_fk FOREIGN KEY ( filmy_i_seriale_id_f_s ) 
        REFERENCES filmy_i_seriale ( id_f_s );

ALTER TABLE administrator 
    ADD CONSTRAINT administrator_a_fk FOREIGN KEY ( adres_kod_pocztowy ) 
        REFERENCES adres ( kod_pocztowy );

ALTER TABLE f_r 
    ADD CONSTRAINT f_r_filmy_i_seriale_fk FOREIGN KEY ( filmy_i_seriale_id_f_s ) 
        REFERENCES filmy_i_seriale ( id_f_s );

ALTER TABLE f_r 
    ADD CONSTRAINT f_r_rezyser_fk FOREIGN KEY ( rezyser_id_rezysera ) 
        REFERENCES rezyser ( id_rezysera );


ALTER TABLE filmy_i_seriale 
    ADD CONSTRAINT filmy_i_seriale_a_fk FOREIGN KEY ( administrator_id_a ) 
        REFERENCES administrator ( id_administratora );

ALTER TABLE filmy_i_seriale 
    ADD CONSTRAINT filmy_i_seriale_g_fk FOREIGN KEY ( gatunek_id_gatunku ) 
        REFERENCES gatunek ( id_gatunku );

ALTER TABLE filmy_i_seriale 
    ADD CONSTRAINT filmy_i_seriale_kp_fk FOREIGN KEY ( kraj_produkcji_id_kraju ) 
        REFERENCES kraj_produkcji ( id_kraju );

ALTER TABLE filmy_i_seriale 
    ADD CONSTRAINT filmy_i_seriale_p_fk FOREIGN KEY ( pakiety_id_pakietu ) 
        REFERENCES pakiety ( id_pakietu );

ALTER TABLE filmy_i_seriale 
    ADD CONSTRAINT filmy_i_seriale_t_fk FOREIGN KEY ( typ_filmu_i_serialu_id_t ) 
        REFERENCES typ_filmu_i_serialu ( id_typow );

ALTER TABLE recenzja_filmu_i_serialu 
    ADD CONSTRAINT recenzja_f_s_fk FOREIGN KEY ( filmy_i_seriale_id_f_s ) 
        REFERENCES filmy_i_seriale ( id_f_s );

ALTER TABLE recenzja_filmu_i_serialu 
    ADD CONSTRAINT recenzja_f_s_k_fk FOREIGN KEY ( klient_id_klienta ) 
        REFERENCES klient ( id_klienta );

ALTER TABLE transakcje 
    ADD CONSTRAINT transakcje_u_fk FOREIGN KEY ( umowy_id_umowy ) 
        REFERENCES umowy ( id_umowy );

ALTER TABLE transakcje 
    ADD CONSTRAINT transakcje_w_fk FOREIGN KEY ( wypozyczenia_id_w ) 
        REFERENCES wypozyczenia ( id_wypozyczenia );

ALTER TABLE umowy 
    ADD CONSTRAINT umowy_administrator_fk FOREIGN KEY ( administrator_id_a ) 
        REFERENCES administrator ( id_administratora );

ALTER TABLE umowy 
    ADD CONSTRAINT umowy_klient_fk FOREIGN KEY ( klient_id_klienta ) 
        REFERENCES klient ( id_klienta );

ALTER TABLE umowy 
    ADD CONSTRAINT umowy_pakiety_fk FOREIGN KEY ( pakiety_id_pakietu ) 
        REFERENCES pakiety ( id_pakietu );

ALTER TABLE umowy 
    ADD CONSTRAINT umowy_rodzaj_p_fk FOREIGN KEY ( rodzaj_platnosci_id_p ) 
        REFERENCES rodzaj_platnosci ( id_platnosci );

ALTER TABLE wypozyczenia 
    ADD CONSTRAINT wypozyczenia_ad_fk FOREIGN KEY ( administrator_id_ad ) 
        REFERENCES administrator ( id_administratora );

ALTER TABLE wypozyczenia 
    ADD CONSTRAINT wypozyczenia_f_s_fk FOREIGN KEY ( filmy_i_seriale_id_f_s ) 
        REFERENCES filmy_i_seriale ( id_f_s );

ALTER TABLE wypozyczenia 
    ADD CONSTRAINT wypozyczenia_klient_fk FOREIGN KEY ( klient_id_klienta ) 
        REFERENCES klient ( id_klienta );

ALTER TABLE wypozyczenia 
    ADD CONSTRAINT wypozyczenia_rp_fk FOREIGN KEY ( rodzaj_platnosci_id_p ) 
        REFERENCES rodzaj_platnosci ( id_platnosci );



/* aktorzy */ 
CREATE SEQUENCE dept_deptidaktorzy_seq; 
BEGIN 
INSERT INTO aktorzy VALUES 
(dept_deptidaktorzy_seq.NEXTVAL,'Joaquin','Phoenix','48','USA'); 
INSERT INTO aktorzy VALUES 
(dept_deptidaktorzy_seq.NEXTVAL,'Jack','Nicholson','85','USA'); 
INSERT INTO aktorzy VALUES 
(dept_deptidaktorzy_seq.NEXTVAL,'Leonardo','DiCaprio','48','USA'); 
INSERT INTO aktorzy VALUES (dept_deptidaktorzy_seq.NEXTVAL,'Al','Pacino','82','USA'); 
INSERT INTO aktorzy VALUES 
(dept_deptidaktorzy_seq.NEXTVAL,'Clint','Eastwood','92','USA'); 
INSERT INTO aktorzy VALUES 
(dept_deptidaktorzy_seq.NEXTVAL,'Anthony','Hopkins','84','USA'); 
INSERT INTO aktorzy VALUES (dept_deptidaktorzy_seq.NEXTVAL,'Daniel','DayLewis','65','Wielka Brytania'); 
INSERT INTO aktorzy VALUES (dept_deptidaktorzy_seq.NEXTVAL,'Robert','Downey 
Jr.','57','USA'); 
INSERT INTO aktorzy VALUES (dept_deptidaktorzy_seq.NEXTVAL,'Joe','Pesci','79','USA'); 
INSERT INTO aktorzy VALUES (dept_deptidaktorzy_seq.NEXTVAL,'Will','Smith','54','USA'); 
INSERT INTO aktorzy VALUES 
(dept_deptidaktorzy_seq.NEXTVAL,'Tom','Hiddleston','41','Wielka Brytania'); 
INSERT INTO aktorzy VALUES (dept_deptidaktorzy_seq.NEXTVAL,'Tom','Hanks','66','USA'); 
INSERT INTO aktorzy VALUES 
(dept_deptidaktorzy_seq.NEXTVAL,'Edward','Norton','53','USA'); 
INSERT INTO aktorzy VALUES 
(dept_deptidaktorzy_seq.NEXTVAL,'Johnny','Depp','59','USA'); 
INSERT INTO aktorzy VALUES 
(dept_deptidaktorzy_seq.NEXTVAL,'Christoph','Waltz','66','Austria'); 
INSERT INTO aktorzy VALUES (dept_deptidaktorzy_seq.NEXTVAL,'Tom','Hardy','45','Wielka 
Brytania'); 
INSERT INTO aktorzy VALUES (dept_deptidaktorzy_seq.NEXTVAL,'Brad','Pitt','58','USA'); 
INSERT INTO aktorzy VALUES 
(dept_deptidaktorzy_seq.NEXTVAL,'Hugh','Jackman','54','Australia'); 
INSERT INTO aktorzy VALUES 
(dept_deptidaktorzy_seq.NEXTVAL,'Jake','Gyllenhaal','41','USA'); 
INSERT INTO aktorzy VALUES 
(dept_deptidaktorzy_seq.NEXTVAL,'Cillian','Murphy','46','Irlandia'); 
END; 
/
/* kraj produkcji */ 
BEGIN 
INSERT INTO kraj_produkcji VALUES ('1','Polska'); 
INSERT INTO kraj_produkcji VALUES ('2','Niemcy'); 
INSERT INTO kraj_produkcji VALUES ('3','Francja'); 
INSERT INTO kraj_produkcji VALUES ('4','Wielka Brytania'); 
INSERT INTO kraj_produkcji VALUES ('5','Hiszpania'); 
INSERT INTO kraj_produkcji VALUES ('6','USA'); 
INSERT INTO kraj_produkcji VALUES ('7','Rosja'); 
INSERT INTO kraj_produkcji VALUES ('8','Finlandia'); 
INSERT INTO kraj_produkcji VALUES ('9','Portugalia'); 
INSERT INTO kraj_produkcji VALUES ('10','Turcja'); 
INSERT INTO kraj_produkcji VALUES ('11','Nowa Zelandia'); 
INSERT INTO kraj_produkcji VALUES ('12','Szwajcaria'); 
END; 
/
/* adres */ 
begin 
insert into adres values ('33-230', 'Rzeszow', 'Podkarpackie' ); 
insert into adres values ('33-231', 'Krakow', 'Malopolskie' ); 
insert into adres values ('33-232', 'Warszawa', 'Mazowieckie' ); 
insert into adres values ('33-233', 'Gdansk', 'Podkarpackie' ); 
insert into adres values ('33-234', 'Katowice', 'Slaskie' ); 
insert into adres values ('33-235', 'Kielce', 'Swietokrzyskie' ); 
end; 
/
/* administrator */ 
BEGIN 
INSERT INTO administrator VALUES ('1', 'Piotr', 'Pajda', '587567457', 'ppajda@onet.pl','33-230', 'Szkolna'); 
INSERT INTO administrator VALUES ('2', 'Joanna', 'Mazur', '765887658', 'jmazur@wp.pl', '33-231', 'Promienna'); 
END;
/
/* rezyser */ 
CREATE SEQUENCE dept_deptidrezyser_seq; 
BEGIN 
INSERT INTO rezyser VALUES (dept_deptidrezyser_seq.NEXTVAL, 'Stanley', 'Kubrick', 54, 
'Stany Zjednoczone' ); 
INSERT INTO rezyser VALUES (dept_deptidrezyser_seq.NEXTVAL, 'James', 'Cameron', 58, 
'Kanada'); 
INSERT INTO rezyser VALUES (dept_deptidrezyser_seq.NEXTVAL, 'Jerzy', 'Hoffman', 90, 
'Polska'); 
INSERT INTO rezyser VALUES (dept_deptidrezyser_seq.NEXTVAL, 'Quentin', 'Tarantino', 59, 
'Stany Zjednoczone'); 
INSERT INTO rezyser VALUES (dept_deptidrezyser_seq.NEXTVAL, 'Wes', 'Anderson', 53, 
'Stany Zjednoczone'); 
END; 
/
/*pakiety*/ 
BEGIN 
INSERT INTO pakiety VALUES ('1','Premium','60'); 
INSERT INTO pakiety VALUES ('2','Gold','40'); 
INSERT INTO pakiety VALUES ('3','Standard','20'); 
END; 
/
/* klienci */
CREATE SEQUENCE dept_deptid_seq;

BEGIN
  INSERT INTO klient VALUES (dept_deptid_seq.NEXTVAL, 'Jan', 'Kowalski', 19, '517928516', 'jkowalski@onet.pl', 'Haslo1@Losowe', 'Urocza', '33-230', 1);
  INSERT INTO klient VALUES (dept_deptid_seq.NEXTVAL, 'Piotr', 'Kawka', 19, '516753851', 'pkawka@onet.pl', 'LosoweHaslo2#', 'Solna', '33-232', 2);
  INSERT INTO klient VALUES (dept_deptid_seq.NEXTVAL, 'Jadwiga', 'Nowak', 19, '587626881', 'jnowak@onet.pl', '3HasloLosowe&', 'Wielkopolska', '33-231', 3);
  INSERT INTO klient VALUES (dept_deptid_seq.NEXTVAL, 'Zuzanna', 'Kijek', 33, '501693279', 'zkijek@onet.pl', 'H@sl0_LosowE', 'Partyzantow', '33-235', 1);
  INSERT INTO klient VALUES (dept_deptid_seq.NEXTVAL, 'Klaudia', 'Hula', 25, '719465578', 'khula@onet.pl', 'Losowe_Haslo#5', 'Podkarpacka', '33-233', 2);
  INSERT INTO klient VALUES (dept_deptid_seq.NEXTVAL, 'Waldemar', 'Sroka', 42, '798587436', 'wsroka@onet.pl', 'H@slo_6_Loso#we', 'Ptasia', '33-231', 3);
  INSERT INTO klient VALUES (dept_deptid_seq.NEXTVAL, 'Pawel', 'Nicpon', 28, '587469875', 'pnicpona@onet.pl', 'Los0weH@sl0_7', 'Mila', '33-232', 1);
  INSERT INTO klient VALUES (dept_deptid_seq.NEXTVAL, 'Aleksandra', 'Mila', 17, '953678731', 'amila@onet.pl', 'LosoweHaslo8@', 'Wesola', '33-230', 2);
  INSERT INTO klient VALUES (dept_deptid_seq.NEXTVAL, 'Marcin', 'Ziolko', 31, '467987656', 'mzilko@onet.pl', 'Haslo9_Loso#we', 'Weteranow', '33-234', 3);
  INSERT INTO klient VALUES (dept_deptid_seq.NEXTVAL, 'Anna', 'Wesolowska', 39, '678876876', 'awesolowska@onet.pl', '10#_Los0we_H@sl0', 'Sadowa', '33-230', 1);
END;
/
/*typ filmu*/ 
BEGIN 
INSERT INTO typ_filmu_i_serialu VALUES ('1','Premiera'); 
INSERT INTO typ_filmu_i_serialu VALUES ('2','Nowość'); 
INSERT INTO typ_filmu_i_serialu VALUES ('3','Standard'); 
INSERT INTO typ_filmu_i_serialu VALUES ('4','Klasyk'); 
END; 
/
/*gatunek*/ 
BEGIN 
INSERT INTO gatunek VALUES ('1','Horror','18'); 
INSERT INTO gatunek VALUES ('2','Akcji','16'); 
INSERT INTO gatunek VALUES ('3','Western','14'); 
INSERT INTO gatunek VALUES ('4','Animowany','8'); 
INSERT INTO gatunek VALUES ('5','Komedia','8'); 
INSERT INTO gatunek VALUES ('6','Romantyczny','16'); 
INSERT INTO gatunek VALUES ('7','Dramat','14'); 
INSERT INTO gatunek VALUES ('8','Fabularny','14'); 
INSERT INTO gatunek VALUES ('9','Fantasy','8'); 
INSERT INTO gatunek VALUES ('10','Komedia romantyczna','16'); 
INSERT INTO gatunek VALUES ('11','Kryminalny','18'); 
INSERT INTO gatunek VALUES ('12','Przygodowy','8'); 
END; 

/
/* filmy i seriale */ 
begin 
insert into filmy_i_seriale values('1','Skazanie na Shawkshank', 
'Adaptacja opowiadania Stephena Kinga. 
Niesłusznie skazany na dożywocie bankier, 
stara się przetrwać w brutalnym, więziennym świecie.', 
20,'7','4','6','2','3'); 
insert into filmy_i_seriale values('2','Nietykalni', 
'Sparaliżowany milioner zatrudnia do opieki młodego 
chłopaka z przedmieścia, który właśnie wyszedł z więzienia.', 
20,'7','4','3','2','2'); 
insert into filmy_i_seriale values('3','Avatar: Istota wody', 
'Pandorę znów napada wroga korporacja w poszukiwaniu cennych minerałów. 
Jack i Neytiri wraz z rodziną zmuszeni są opuścić wioskę i 
szukać pomocy u innych plemion zamieszkujących planetę.',30,'9','1','6','1','1'); 
insert into filmy_i_seriale values('4','Usmiechnij sie','Po tym, 
jak dr Rose Carter bierze udział w traumatycznym zdarzeniu z udziałem pacjentki, 
wokół niej zaczynają dziać się niewytłumaczalne rzeczy',30,'1','1','6','1','1'); 
end; 
/
/* recenzja */ 
BEGIN 
INSERT INTO recenzja_filmu_i_serialu VALUES ('1', 'Polecam', '6', '1', '4', '28-DEC-22'); 
INSERT INTO recenzja_filmu_i_serialu VALUES ('2', 'Bardzo fakny film', '5', '3', '5', '26-DEC-22'); 
INSERT INTO recenzja_filmu_i_serialu VALUES ('3', 'Super!!', '4', '3', '4', '12-DEC-22'); 
INSERT INTO recenzja_filmu_i_serialu VALUES ('4', 'Tragedia', '3', '1', '2', '10-NOV-22'); 
INSERT INTO recenzja_filmu_i_serialu VALUES ('5', 'Swietnie', '2', '1', '5', '17-DEC-22'); 
INSERT INTO recenzja_filmu_i_serialu VALUES ('6', 'Okropne', '1', '2', '1', '13-NOV-22'); 
INSERT INTO recenzja_filmu_i_serialu VALUES ('7', 'Polecam', '8', '4', '2', '28-DEC-22');
END; 
/


/* RODZAJ PLATNOSCI */ 
begin 
insert into rodzaj_platnosci values ('1', 'blik'); 
insert into rodzaj_platnosci values ('2', 'karta'); 
insert into rodzaj_platnosci values ('3', 'przelew'); 
end; 
/
/* umowy */ 
begin 
insert into umowy values('1','1','1','28-DEC-22',60,'1','1'); 
insert into umowy values('2','2','2','12-JAN-22',60,'1','1'); 
insert into umowy values('3','3','1','19-FEB-22',20,'3','2'); 
insert into umowy values('4','4','2','28-jan-22',60,'1','3'); 
insert into umowy values('5','5','2','14-DEC-22',60,'1','1'); 
insert into umowy values('6','6','2','10-JUL-22',20,'3','2'); 
insert into umowy values('7','7','1','28-MAR-20',40,'2','3'); 
insert into umowy values('8','8','1','01-APR-20',60,'1','2'); 
end;
/ 
/* WYPOZYCZENIA */ 
begin 
insert into wypozyczenia values('1','8','1','1','28-DEC-22','12-JAN-23',20,'1'); 
insert into wypozyczenia values('2','7','2','3','12-JAN-22','31-JAN-23',30,'1'); 
insert into wypozyczenia values('3','6','1','2','19-FEB-22','22-FEB-22',20,'2'); 
insert into wypozyczenia values('4','5','2','3','28-jan-22','12-FEB-22',30,'3'); 
insert into wypozyczenia values('5','4','2','4','14-DEC-22','12-JAN-23',30,'1'); 
insert into wypozyczenia values('6','3','2','4','10-JUL-22','22-JUL-22',30,'2'); 
insert into wypozyczenia values('7','2','1','4','28-MAR-20','12-APR-20',30,'3'); 
insert into wypozyczenia values('8','1','1','1','01-APR-20','12-APR-20',20,'2'); 
insert into wypozyczenia values('12','8','1','1','28-DEC-22','12-FEB-23',20,'1')
end; 
/
/* obsady aktorskie */ 
begin 
insert into a_f values('1','1'); 
insert into a_f values('1','2'); 
insert into a_f values('1','3'); 
insert into a_f values('3','1'); 
insert into a_f values('5','2'); 
insert into a_f values('19','2'); 
insert into a_f values('20','1'); 
insert into a_f values('8','4'); 
insert into a_f values('10','4'); 
insert into a_f values('4','4'); 
insert into a_f values('17','4'); 
insert into a_f values('12','3'); 
insert into a_f values('13','2'); 
insert into a_f values('11','3'); 
insert into a_f values('4','3'); 
insert into a_f values('14','2'); 
insert into a_f values('12','1'); 
end; 
/
/* obsady rezyserskie */ 
begin 
insert into f_r values('1','1'); 
insert into f_r values('2','2'); 
insert into f_r values('3','1'); 
insert into f_r values('4','1'); 
insert into f_r values('1','5'); 
insert into f_r values('2','4'); 
end; 
/
/*transakcje*/ 
CREATE SEQUENCE dept_deptidtransakcje_seq; 
begin 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'1',''); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'2',''); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'','1'); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'3',''); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'','2'); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'4',''); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'5',''); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'6',''); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'','3'); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'7',''); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'','4'); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'8',''); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'','5'); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'','6'); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'','7'); 
insert into transakcje values(dept_deptidtransakcje_seq.NEXTVAL,'','8'); 
end;
/

--------------------------------------------------projekt asb
-----------------------------------pakiet zarzadzania filmami
---------------------funkcje

CREATE OR REPLACE FUNCTION ZmianaPakietuPoWypozyczeniu(p_id_klienta INT) RETURN VARCHAR2 IS
    v_liczba_wypozyczen INT;
    v_nowy_pakiet INT;
    v_result VARCHAR2(100);

    wyjatek EXCEPTION;
    PRAGMA EXCEPTION_INIT(wyjatek, -20001);

BEGIN
    BEGIN
        SELECT COUNT(*) INTO v_liczba_wypozyczen FROM wypozyczenia WHERE klient_id_klienta = p_id_klienta;
        
        IF v_liczba_wypozyczen > 5 THEN
            BEGIN
                SELECT k.id_pakietu INTO v_nowy_pakiet
                FROM klient k
                WHERE k.id_klienta = p_id_klienta;

                IF v_nowy_pakiet > 1 THEN
                    BEGIN
                        UPDATE klient 
                        SET id_pakietu = v_nowy_pakiet - 1
                        WHERE id_klienta = p_id_klienta;
                        v_result := 'Gratulacje zmienił Ci się pakiet!';
                    EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                            RAISE wyjatek;
                    END;
                ELSE
                    v_result := 'Masz już najniższy pakiet.';
                END IF;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    -- Rzucenie własnego wyjątku zamiast NO_DATA_FOUND
                    RAISE wyjatek;
            END;
        ELSE
            v_result := 'Wypożycz jeszcze trochę filmów, by zmienić pakiet';
        END IF;
    END;

    RETURN v_result;

    EXCEPTION
        WHEN wyjatek THEN
            v_result := 'Brak danych klienta.';
            RETURN v_result;
END ZmianaPakietuPoWypozyczeniu;
/

DECLARE
    v_wynik VARCHAR2(100);
BEGIN
    v_wynik := ZmianaPakietuPoWypozyczeniu(9);
END;
/

--2. **ObliczSredniaOceneFilmu:**

CREATE OR REPLACE FUNCTION ObliczSredniaOceneFilmu(p_id_filmu_serialu INT) RETURN NUMBER IS
    v_srednia NUMBER;
    wyjatek_zero EXCEPTION;
    PRAGMA EXCEPTION_INIT(wyjatek_zero, -2091);

BEGIN
    BEGIN
        SELECT AVG(ocena) INTO v_srednia
        FROM recenzja_filmu_i_serialu
        WHERE filmy_i_seriale_id_f_s = p_id_filmu_serialu;

        IF v_srednia IS NULL THEN
           
            RAISE wyjatek_zero;
        END IF;

        RETURN v_srednia;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            
            RAISE wyjatek_zero;
        WHEN wyjatek_zero THEN
        
            RETURN -2; 
        WHEN VALUE_ERROR THEN
            RETURN -3; 
    END;

    EXCEPTION
        WHEN wyjatek_zero THEN
            RETURN NULL;
END ObliczSredniaOceneFilmu;
/

DECLARE
    v_wynik NUMBER;
BEGIN
    v_wynik := ObliczSredniaOceneFilmu(1); 

    IF v_wynik IS NOT NULL AND v_wynik >= 0 THEN
        DBMS_OUTPUT.PUT_LINE('Średnia ocena: ' || v_wynik);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Brak danych lub błąd.'); 
    END IF;
END;
/
--3. **ZnajdzFilmyZDanaRecenzja:**

CREATE OR REPLACE FUNCTION ZnajdzFilmyZDanaRecenzja(p_ocena_min INT) RETURN SYS_REFCURSOR IS
    v_result_cursor SYS_REFCURSOR;
BEGIN
    BEGIN
        OPEN v_result_cursor FOR
            SELECT id_f_s, tytul, opis
            FROM filmy_i_seriale
            WHERE id_f_s IN (SELECT filmy_i_seriale_id_f_s FROM recenzja_filmu_i_serialu WHERE ocena >= p_ocena_min);

        IF v_result_cursor%NOTFOUND THEN
            CLOSE v_result_cursor;
            RAISE_APPLICATION_ERROR(-20002, 'Nie ma takiej recenzji.');
        END IF;
    EXCEPTION
        WHEN CURSOR_ALREADY_OPEN THEN
            CLOSE v_result_cursor;
            RAISE;
        WHEN INVALID_CURSOR THEN
            CLOSE v_result_cursor;
            RAISE;
    END;

    RETURN v_result_cursor;
END ZnajdzFilmyZDanaRecenzja;
/

DECLARE
    v_cursor SYS_REFCURSOR;
    v_id_f_s filmy_i_seriale.id_f_s%TYPE;
    v_tytul filmy_i_seriale.tytul%TYPE;
    v_opis filmy_i_seriale.opis%TYPE;
BEGIN
    v_cursor := ZnajdzFilmyZDanaRecenzja(4); 
    LOOP
        FETCH v_cursor INTO v_id_f_s, v_tytul, v_opis;
        EXIT WHEN v_cursor%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('ID: ' || v_id_f_s || ', Tytuł: ' || v_tytul || ', Opis: ' || v_opis);
    END LOOP;

    CLOSE v_cursor;
END;
/


--4. **popularnosc_gatunku:**

CREATE OR REPLACE FUNCTION popularnosc_gatunku(p_id_gatunku INTEGER) RETURN INTEGER AS
    v_ilosc_wypozyczen INTEGER;
BEGIN
    BEGIN
        SELECT COUNT(*)
        INTO v_ilosc_wypozyczen
        FROM wypozyczenia w
        JOIN filmy_i_seriale f ON w.filmy_i_seriale_id_f_s = f.id_f_s
        WHERE f.gatunek_id_gatunku = p_id_gatunku;

        IF v_ilosc_wypozyczen < 0 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Nie ma gatunku o podanym ID.');
        END IF;
    EXCEPTION
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20001, 'Błąd przy liczeniu ilości wypożyczeń.');
        
    END;

    RETURN v_ilosc_wypozyczen;
END popularnosc_gatunku;
/

DECLARE
    v_id_gatunku INTEGER := 1; 
    v_ilosc_wypozyczen INTEGER;
BEGIN
    BEGIN
        v_ilosc_wypozyczen := popularnosc_gatunku(v_id_gatunku);

        IF v_ilosc_wypozyczen >= 0 THEN
            DBMS_OUTPUT.PUT_LINE('Popularność gatunku o ID ' || v_id_gatunku || ' wynosi: ' || v_ilosc_wypozyczen);
        END IF;
   
    END;
END;
/


--5. **aktualizuj_cene_filmu_z_rabatem:**

CREATE OR REPLACE FUNCTION aktualizuj_cene_filmu_z_rabatem(
    p_id_filmu INTEGER,
    p_nowa_cena INTEGER,
    p_id_klienta INTEGER
) RETURN INTEGER AS
    v_rabat INTEGER := 10;
    v_id_filmu INTEGER;
    v_id_klienta INTEGER;

    film_nie_znaleziony EXCEPTION;
    klient_nie_znaleziony EXCEPTION;
    error_wyjatek EXCEPTION;
    PRAGMA EXCEPTION_INIT(film_nie_znaleziony, -20001);
    PRAGMA EXCEPTION_INIT(klient_nie_znaleziony, -20002);
    PRAGMA EXCEPTION_INIT(error_wyjatek, -20003);

BEGIN

    SELECT id_f_s INTO v_id_filmu
    FROM filmy_i_seriale
    WHERE id_f_s = p_id_filmu;

    IF v_id_filmu IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('Nie znaleziono filmu.');
   
        RAISE film_nie_znaleziony;
    END IF;

    SELECT id_klienta INTO v_id_klienta
    FROM klient
    WHERE id_klienta = p_id_klienta;

    IF v_id_klienta IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('Nie znaleziono klienta.');
    
        RAISE klient_nie_znaleziony;
    END IF;

    UPDATE filmy_i_seriale
    SET cena = p_nowa_cena * (1 - v_rabat / 100)
    WHERE id_f_s = p_id_filmu;

    RETURN SQL%ROWCOUNT;

    EXCEPTION
        WHEN error_wyjatek THEN
            DBMS_OUTPUT.PUT_LINE('Błąd wartości.');
            RETURN -1; 
        WHEN film_nie_znaleziony THEN
            RETURN -2; 
        WHEN klient_nie_znaleziony THEN
            RETURN -3; 
END aktualizuj_cene_filmu_z_rabatem;
/

--początkowa ceny filmu
SELECT cena
FROM filmy_i_seriale
WHERE id_f_s = 1;

-- Wywołanie funkcji
DECLARE
    v_result INTEGER;
BEGIN
    v_result := aktualizuj_cene_filmu_z_rabatem(
                    p_id_filmu => 1,
                    p_nowa_cena => 20,
                    p_id_klienta => 3
                );

    IF v_result >= 0 THEN
        DBMS_OUTPUT.PUT_LINE('Liczba zaktualizowanych rekordów: ' || v_result);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Błąd.'); 
    END IF;
END;
/
--koncowa cena filmu
SELECT cena
FROM filmy_i_seriale
WHERE id_f_s = 1;

--6. **zwieksz_popularnosc_po_wypozyczeniu:**

CREATE OR REPLACE FUNCTION zwieksz_popularnosc_po_wypozyczeniu(p_id_filmu INTEGER) RETURN INTEGER AS
    v_ilosc_wypozyczen INTEGER;
    v_popularnosc INTEGER := 0;

    wypozyczenie_nie_znalezione EXCEPTION;
    error_wyjatek EXCEPTION;
    PRAGMA EXCEPTION_INIT(wypozyczenie_nie_znalezione, -20001);
    PRAGMA EXCEPTION_INIT(error_wyjatek, -20002);

BEGIN
 
    SELECT COUNT(*) INTO v_ilosc_wypozyczen
    FROM wypozyczenia
    WHERE filmy_i_seriale_id_f_s = p_id_filmu;

    IF v_ilosc_wypozyczen = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Nie ma takiego wypożyczenia.');

        RAISE wypozyczenie_nie_znalezione;
    END IF;

    v_popularnosc := v_ilosc_wypozyczen * 10;

    DBMS_OUTPUT.PUT_LINE('Popularność filmu wynosi ' || v_popularnosc);

    RETURN v_popularnosc;

    EXCEPTION
        WHEN error_wyjatek THEN
            DBMS_OUTPUT.PUT_LINE('Błąd wartości.');
            RETURN -1; 
        WHEN wypozyczenie_nie_znalezione THEN
            RETURN -2; 
END zwieksz_popularnosc_po_wypozyczeniu;
/

DECLARE
   v_ilosc_wypozyczen INTEGER;
BEGIN
   v_ilosc_wypozyczen := zwieksz_popularnosc_po_wypozyczeniu(1);

END;
/

---------------------procedury 
--1. **AktualizujOpisFilmu**
CREATE OR REPLACE PROCEDURE AktualizujOpisFilmu(p_id_filmu_serialu IN NUMBER, p_nowy_opis IN VARCHAR2) IS

    film_nie_znaleziony EXCEPTION;
    PRAGMA EXCEPTION_INIT(film_nie_znaleziony, -20001);

BEGIN
    UPDATE filmy_i_seriale SET opis = p_nowy_opis WHERE id_f_s = p_id_filmu_serialu;
    DBMS_OUTPUT.PUT_LINE('Opis filmu lub serialu zaktualizowany.');

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Film lub serial o podanym identyfikatorze nie istnieje.');
          
            RAISE film_nie_znaleziony;
END AktualizujOpisFilmu;
/


DECLARE
    v_id NUMBER := 1; 
    v_opis VARCHAR2(255) := 'Nowy opis filmu lub serialu';
BEGIN
    AktualizujOpisFilmu(v_id, v_opis);
END;
/

--2. **Zwieksz_limit_wypozyczen:**
CREATE OR REPLACE PROCEDURE zwieksz_limit_wypozyczen(p_id_klienta INTEGER, p_nowy_limit INTEGER) AS
   
    umowa_nie_znaleziona EXCEPTION;
    PRAGMA EXCEPTION_INIT(umowa_nie_znaleziona, -20001);

    v_umowa_id_umowy umowy.id_umowy%TYPE;
BEGIN
    BEGIN
        SELECT id_umowy INTO v_umowa_id_umowy
        FROM umowy
        WHERE klient_id_klienta = p_id_klienta;

        IF v_umowa_id_umowy IS NOT NULL THEN
            UPDATE umowy
            SET kwota_koncowa = p_nowy_limit
            WHERE id_umowy = v_umowa_id_umowy;

            DBMS_OUTPUT.PUT_LINE('Zaktualizowano limit wypożyczeń klienta o ID ' || p_id_klienta);
        ELSE
           
            RAISE umowa_nie_znaleziona;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        
            RAISE umowa_nie_znaleziona;
    END;

    EXCEPTION
        WHEN umowa_nie_znaleziona THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono umowy dla klienta o ID ' || p_id_klienta);
END zwieksz_limit_wypozyczen;
/
DECLARE
    v_id_klienta NUMBER := 1;
    v_nowy_limit NUMBER := 80; 
BEGIN
    zwieksz_limit_wypozyczen(v_id_klienta, v_nowy_limit);
END;
/

--3. **Dodaj_nowy_gatunek_automatycznie:**
CREATE OR REPLACE PROCEDURE dodaj_nowy_gatunek_automatycznie(p_nazwa VARCHAR2, p_wiek_ograniczenia INTEGER) AS
    
    dane_nie_znalezione EXCEPTION;
    PRAGMA EXCEPTION_INIT(dane_nie_znalezione, -20001);

    v_id_gatunku INTEGER;
BEGIN
    BEGIN

        SELECT MAX(id_gatunku) + 1 INTO v_id_gatunku FROM gatunek;

        IF v_id_gatunku IS NULL THEN
            v_id_gatunku := 1;
        END IF;
    EXCEPTION
        WHEN dane_nie_znalezione THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono danych przy pobieraniu ID gatunku.');
    
            RAISE dane_nie_znalezione;
    END;

    BEGIN
        INSERT INTO gatunek(id_gatunku, nazwa, wiek_ograniczenia)
        VALUES (v_id_gatunku, p_nazwa, p_wiek_ograniczenia);

        DBMS_OUTPUT.PUT_LINE('Dodano nowy gatunek:');
        DBMS_OUTPUT.PUT_LINE('ID Gatunku: ' || v_id_gatunku);
        DBMS_OUTPUT.PUT_LINE('Nazwa: ' || p_nazwa);
        DBMS_OUTPUT.PUT_LINE('Wiek Ograniczenia: ' || p_wiek_ograniczenia);
    EXCEPTION
        WHEN dane_nie_znalezione THEN
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd podczas wstawiania nowego gatunku: ' || SQLERRM);
            RAISE dane_nie_znalezione;
    END;
END dodaj_nowy_gatunek_automatycznie;
/

DECLARE
    v_nazwa_gatunku VARCHAR2(100) := 'Nowy Gatunek';
    v_wiek_ograniczenia INTEGER := 16;
BEGIN
    dodaj_nowy_gatunek_automatycznie(v_nazwa_gatunku, v_wiek_ograniczenia);
END;
/


--4. **dodaj_ocene_i_srednia:**
select * from recenzja_filmu_i_serialu;
SELECT AVG(ocena) AS srednia_ocena
FROM recenzja_filmu_i_serialu
WHERE filmy_i_seriale_id_f_s = 1;

CREATE SEQUENCE recenzja_filmu_i_serialu_seq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE PROCEDURE dodaj_ocene_i_srednia(p_id_filmu INTEGER, p_ocena INTEGER) AS
    id_recenzji_nie_znalezione EXCEPTION;
    oceny_nie_znalezione EXCEPTION;
    zero_wyjatek EXCEPTION;
    PRAGMA EXCEPTION_INIT(id_recenzji_nie_znalezione, -20001);
    PRAGMA EXCEPTION_INIT(oceny_nie_znalezione, -20002);
    PRAGMA EXCEPTION_INIT(zero_wyjatek, -20003);

    v_nowa_ocena INTEGER := p_ocena;
    v_nowy_srednia NUMBER;
    v_id_recenzji recenzja_filmu_i_serialu.id_recenzji%TYPE;

BEGIN
    BEGIN
        SELECT recenzja_filmu_i_serialu_seq.NEXTVAL INTO v_id_recenzji FROM DUAL;
        IF v_id_recenzji IS NULL THEN
            RAISE id_recenzji_nie_znalezione;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie udało się pobrać nowego ID recenzji.');
            RAISE id_recenzji_nie_znalezione;
    END;

    BEGIN
        IF v_nowa_ocena < 0 THEN
            RAISE zero_wyjatek;
        END IF;

        INSERT INTO recenzja_filmu_i_serialu(id_recenzji, filmy_i_seriale_id_f_s, ocena)
        VALUES (v_id_recenzji, p_id_filmu, v_nowa_ocena);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd podczas dodawania nowej oceny: ' || SQLERRM);
            RAISE oceny_nie_znalezione;
    END;

    BEGIN
        SELECT AVG(ocena) INTO v_nowy_srednia
        FROM recenzja_filmu_i_serialu
        WHERE filmy_i_seriale_id_f_s = p_id_filmu;

        IF v_nowy_srednia IS NULL THEN
            RAISE oceny_nie_znalezione;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono ocen dla danego filmu.');
            RAISE oceny_nie_znalezione;
        WHEN zero_wyjatek THEN
            DBMS_OUTPUT.PUT_LINE('Ocena mniejsza niż zero.');
            RAISE zero_wyjatek;
    END;

    DBMS_OUTPUT.PUT_LINE('Dodano nową ocenę:');
    DBMS_OUTPUT.PUT_LINE('ID Recenzji: ' || v_id_recenzji);
    DBMS_OUTPUT.PUT_LINE('ID Filmu: ' || p_id_filmu);
    DBMS_OUTPUT.PUT_LINE('Nowa Ocena: ' || v_nowa_ocena);
    DBMS_OUTPUT.PUT_LINE('Nowa Średnia Ocena Filmu (ID ' || p_id_filmu || '): ' || v_nowy_srednia);

EXCEPTION
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd typu VALUE_ERROR: ' || SQLERRM);
    WHEN id_recenzji_nie_znalezione THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd przy pobieraniu nowego ID recenzji.');
    WHEN oceny_nie_znalezione THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd przy dodawaniu nowej oceny lub obliczaniu średniej.');
    WHEN zero_wyjatek THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: Ocena mniejsza niż zero.');
END dodaj_ocene_i_srednia;
/

BEGIN
    dodaj_ocene_i_srednia(1, 4);

END;
/


--5. **Usun_film:**
CREATE OR REPLACE PROCEDURE usun_film(p_id_f_s NUMBER) AS
BEGIN
    BEGIN
        DELETE FROM WYPOZYCZENIA WHERE FILMY_I_SERIALE_ID_F_S = p_id_f_s;
		DELETE FROM TRANSAKCJE WHERE WYPOZYCZENIA_ID_W = p_id_f_s;
        DELETE FROM FILMY_I_SERIALE WHERE ID_F_S = p_id_f_s;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN

            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLERRM);
        END;

END usun_film;
/

select * from filmy_i_seriale;

EXEC usun_film(4); 


-----------------------------------pakiet zarzadzania uzytkownikami
---------------------funkcje

--1. **Zwrotliczbywypozyczen:**
CREATE OR REPLACE FUNCTION ZwrocLiczbeWypozyczen(id_klienta INT) RETURN INT IS
    klient_nie_znaleziony EXCEPTION;
    bledna_wartosc EXCEPTION;
    PRAGMA EXCEPTION_INIT(klient_nie_znaleziony, -20001);
    PRAGMA EXCEPTION_INIT(bledna_wartosc, -20002);

    liczba_wypozyczen INT;
BEGIN

    BEGIN
        SELECT COUNT(*) INTO liczba_wypozyczen
        FROM wypozyczenia
        WHERE klient_id_klienta = id_klienta;

        IF liczba_wypozyczen = 0 THEN
    
            RAISE klient_nie_znaleziony;
        END IF;
    EXCEPTION
        WHEN VALUE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE('Błąd wartości podczas sprawdzania wypożyczeń klienta.');
    
            RAISE bledna_wartosc;
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono klienta o podanym ID.');
         
            RAISE klient_nie_znaleziony;
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd podczas sprawdzania wypożyczeń klienta: ' || SQLERRM);
        
            RAISE bledna_wartosc;
    END;

    BEGIN
        SELECT COUNT(*) INTO liczba_wypozyczen
        FROM wypozyczenia
        WHERE klient_id_klienta = id_klienta;
    EXCEPTION
        WHEN VALUE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE('Błąd wartości podczas pobierania liczby wypożyczeń.');
          
            RAISE bledna_wartosc;
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono wypożyczeń dla klienta o podanym ID.');
           
            RAISE klient_nie_znaleziony;
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd podczas pobierania liczby wypożyczeń: ' || SQLERRM);
            
            RAISE bledna_wartosc;
    END;

    RETURN liczba_wypozyczen;
END ZwrocLiczbeWypozyczen;
/

DECLARE
    v_result NUMBER;
BEGIN
    v_result := ZwrocLiczbeWypozyczen(1); 
END;
/


--2. **ZnajdzUzytkownikaPoEmailu:**
CREATE OR REPLACE FUNCTION ZnajdzUzytkownikaPoEmailu(email VARCHAR2) RETURN SYS_REFCURSOR IS
    result_cursor SYS_REFCURSOR;
BEGIN
    result_cursor := NULL;

    BEGIN
        OPEN result_cursor FOR
            SELECT *
            FROM klient
            WHERE email = ZnajdzUzytkownikaPoEmailu.email; 
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono użytkownika o podanym emailu.');
        WHEN CURSOR_ALREADY_OPEN THEN
            DBMS_OUTPUT.PUT_LINE('Kursor jest już otwarty.');
        WHEN INVALID_CURSOR THEN
            DBMS_OUTPUT.PUT_LINE('Nieprawidłowy kursor.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLERRM);
    END;

    RETURN result_cursor;
END ZnajdzUzytkownikaPoEmailu;
/
DECLARE
    v_result_cursor SYS_REFCURSOR;
    v_user_rec klient%ROWTYPE;
BEGIN
    v_result_cursor := ZnajdzUzytkownikaPoEmailu('zkijek@onet.pl');

    LOOP
        FETCH v_result_cursor INTO
            v_user_rec;

        EXIT WHEN v_result_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID użytkownika: ' || v_user_rec.id_klienta);
        DBMS_OUTPUT.PUT_LINE('Nazwa użytkownika: ' || v_user_rec.imie || ' ' || v_user_rec.nazwisko);
        DBMS_OUTPUT.PUT_LINE('Email użytkownika: ' || v_user_rec.email);
    END LOOP;
    CLOSE v_result_cursor;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLERRM);
        IF v_result_cursor IS NOT NULL THEN
            CLOSE v_result_cursor;
        END IF;
END;
/


--3. **SprawdzCzyUzytkownikPelnoletni:**
CREATE OR REPLACE FUNCTION SprawdzCzyUzytkownikPelnoletni(id_klienta INT) RETURN BOOLEAN IS
    
    klient_nieznaleziony EXCEPTION;
    PRAGMA EXCEPTION_INIT(klient_nieznaleziony, -20001);

    czy_pelnoletni BOOLEAN;
    wiek_klienta INTEGER;
BEGIN
    BEGIN
        SELECT wiek INTO wiek_klienta FROM klient WHERE id_klienta = id_klienta AND ROWNUM = 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
         
            RAISE klient_nieznaleziony;
    END;

    IF wiek_klienta >= 18 THEN
        czy_pelnoletni := TRUE;
    ELSE
        czy_pelnoletni := FALSE;
    END IF;

    RETURN czy_pelnoletni;

EXCEPTION
    WHEN klient_nieznaleziony THEN
        DBMS_OUTPUT.PUT_LINE('Klient nie znaleziony.');
        RETURN FALSE;
END SprawdzCzyUzytkownikPelnoletni;
/

DECLARE
    czy_pelnoletni BOOLEAN;
BEGIN
    czy_pelnoletni := SprawdzCzyUzytkownikPelnoletni(1);
    IF czy_pelnoletni THEN
        DBMS_OUTPUT.PUT_LINE('Użytkownik jest pełnoletni.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Użytkownik nie jest pełnoletni.');
    END IF;
END;
/

--4. **dodaj_klienta_do_grupy:**
CREATE OR REPLACE FUNCTION dodaj_klienta_do_grupy(p_id_klienta INTEGER) RETURN INTEGER AS
 
   brak_danych EXCEPTION;
   PRAGMA EXCEPTION_INIT(brak_danych, -20001);

   TYPE grupy_rabatowe_klienci IS TABLE OF INTEGER;
   v_grupa_rabatowa grupy_rabatowe_klienci := grupy_rabatowe_klienci();  
BEGIN

   v_grupa_rabatowa.EXTEND;
   v_grupa_rabatowa(v_grupa_rabatowa.LAST) := p_id_klienta;

   DBMS_OUTPUT.PUT_LINE('Zostałeś dodany do grupy rabatowej!');

   RETURN 1;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      RAISE brak_danych;

END dodaj_klienta_do_grupy;
/

DECLARE
   v_result INTEGER;
BEGIN
   v_result := dodaj_klienta_do_grupy(1); 

   IF v_result = 1 THEN
      DBMS_OUTPUT.PUT_LINE('Funkcja wykonana pomyślnie.');
   ELSE
      DBMS_OUTPUT.PUT_LINE('Wystąpił błąd podczas wykonania funkcji.');
   END IF;
END;
/

-----2 wersja 

CREATE OR REPLACE FUNCTION dodaj_klienta_do_grupy(p_id_klienta INTEGER) RETURN INTEGER AS
 
   brak_danych EXCEPTION;
   PRAGMA EXCEPTION_INIT(brak_danych, -20001);

   TYPE grupy_rabatowe_klienci IS TABLE OF INTEGER;
   v_grupa_rabatowa grupy_rabatowe_klienci := grupy_rabatowe_klienci();  
BEGIN

   v_grupa_rabatowa.EXTEND;
   v_grupa_rabatowa(v_grupa_rabatowa.LAST) := p_id_klienta;

   DBMS_OUTPUT.PUT_LINE('Dodano do grupy rabatowej!');

   RETURN 1;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      RAISE brak_danych;

END dodaj_klienta_do_grupy;
/

DECLARE
   v_result INTEGER;
BEGIN
   v_result := dodaj_klienta_do_grupy(1); 

   IF v_result = 1 THEN
      DBMS_OUTPUT.PUT_LINE('Funkcja wykonana pomyślnie.');
   ELSE
      DBMS_OUTPUT.PUT_LINE('Wystąpił błąd podczas wykonania funkcji.');
   END IF;
END;
/


--5. **zmien_adres_uzytkownika:**

CREATE OR REPLACE FUNCTION zmien_adres_uzytkownika2(p_id_klienta INTEGER, p_nowy_adres VARCHAR2) RETURN INTEGER AS
   
   brak_danych EXCEPTION;
   id_null EXCEPTION;
   PRAGMA EXCEPTION_INIT(brak_danych, -20001);
   PRAGMA EXCEPTION_INIT(id_null, -20002);

   v_liczba_zaktualizowanych INTEGER;
BEGIN

   IF p_id_klienta IS NULL THEN
      RAISE id_null;
   END IF;

   UPDATE klient
   SET ulica = p_nowy_adres
   WHERE id_klienta = p_id_klienta;

   v_liczba_zaktualizowanych := SQL%ROWCOUNT;

   IF v_liczba_zaktualizowanych = 0 THEN
      RAISE brak_danych;
   END IF;

   RETURN v_liczba_zaktualizowanych;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
    
      RAISE brak_danych;
   WHEN id_null THEN
      DBMS_OUTPUT.PUT_LINE('Podane ID klienta jest NULL.');
      RETURN -1;
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLCODE || ' - ' || SQLERRM);
      RETURN -1; 
END zmien_adres_uzytkownika2;
/

DECLARE
   v_liczba_zaktualizowanych INTEGER;
BEGIN
   v_liczba_zaktualizowanych := zmien_adres_uzytkownika2(1, 'Nowy Adres Testowy');

   IF v_liczba_zaktualizowanych > 0 THEN
      DBMS_OUTPUT.PUT_LINE('Adres zaktualizowany dla ' || v_liczba_zaktualizowanych || ' klienta.');
   ELSIF v_liczba_zaktualizowanych = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Brak klienta o podanym ID.');
   ELSE
      DBMS_OUTPUT.PUT_LINE('Wystąpił błąd podczas aktualizacji adresu.');
   END IF;
END;
/


--6. **nalicz_kare:**
CREATE OR REPLACE FUNCTION nalicz_kare(wypozyczenie_id INTEGER)
RETURN INTEGER
IS

  brak_danych EXCEPTION;
  id_null EXCEPTION;
  PRAGMA EXCEPTION_INIT(brak_danych, -20001);
  PRAGMA EXCEPTION_INIT(id_null, -20002);

  v_data_wypozyczenia DATE;
  v_data_oddania DATE;
  v_roznica NUMBER;
  v_kara NUMBER := 0;
BEGIN

  IF wypozyczenie_id IS NULL THEN
    RAISE id_null;
  END IF;

  SELECT data_wypozyczenia, data_oddania
  INTO v_data_wypozyczenia, v_data_oddania
  FROM wypozyczenia
  WHERE id_wypozyczenia = wypozyczenie_id;


  v_roznica := v_data_oddania - v_data_wypozyczenia;

  IF v_roznica > 30 THEN
    v_kara := (v_roznica - 30) * 0.5; 
  END IF;

  RETURN v_kara;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RAISE brak_danych;
  WHEN id_null THEN
    DBMS_OUTPUT.PUT_LINE('Podane ID wypożyczenia jest NULL.');
    RETURN NULL;
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLCODE || ' - ' || SQLERRM);
    RETURN NULL; 
END nalicz_kare;
/

DECLARE
  v_kara INTEGER;
BEGIN
  v_kara := nalicz_kare(2);

  IF v_kara IS NOT NULL THEN
    DBMS_OUTPUT.PUT_LINE('Kara: ' || v_kara);
  END IF;
END;
/


---------------------procedury
--1. **zmien_adres_uzytkownika:**
CREATE OR REPLACE PROCEDURE zmien_email_uzytkownika(p_id_klienta INTEGER, p_nowy_adres_email VARCHAR2) AS
    
    brak_uzytkownika EXCEPTION;
    inny_blad EXCEPTION;
    PRAGMA EXCEPTION_INIT(brak_uzytkownika, -20001);
    PRAGMA EXCEPTION_INIT(inny_blad, -20002);

    v_stary_adres_email VARCHAR2(50 CHAR);
BEGIN

    SELECT email INTO v_stary_adres_email
    FROM klient
    WHERE id_klienta = p_id_klienta;
    UPDATE klient
    SET email = p_nowy_adres_email
    WHERE id_klienta = p_id_klienta;

    DBMS_OUTPUT.PUT_LINE('Zmieniono adres e-mail użytkownika (ID ' || p_id_klienta || '):');
    DBMS_OUTPUT.PUT_LINE('Stary adres e-mail: ' || v_stary_adres_email);
    DBMS_OUTPUT.PUT_LINE('Nowy adres e-mail: ' || p_nowy_adres_email);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
     
        RAISE brak_uzytkownika;
    WHEN OTHERS THEN

        RAISE inny_blad;
END zmien_email_uzytkownika;
/

DECLARE
    v_id_klienta INTEGER := 1; 
    v_nowy_adres_email VARCHAR2(50 CHAR) := 'nowy_email@example.com';
BEGIN
    zmien_email_uzytkownika(v_id_klienta, v_nowy_adres_email);
END;
/

--2. **pobierz_informacje_klienta:**
CREATE OR REPLACE PROCEDURE pobierz_informacje_klienta (
    p_id_klienta IN INTEGER
) AS

    brak_uzytkownika EXCEPTION;
    PRAGMA EXCEPTION_INIT(brak_uzytkownika, -20001);

    v_imie               klient.imie%TYPE;
    v_nazwisko           klient.nazwisko%TYPE;
    v_wiek               klient.wiek%TYPE;
    v_nr_telefonu        klient.nr_telefonu%TYPE;
    v_email              klient.email%TYPE;
    v_ulica              klient.ulica%TYPE;
    v_adres_kod_pocztowy klient.adres_kod_pocztowy%TYPE;
    v_id_pakietu         klient.id_pakietu%TYPE;

BEGIN
  
    SELECT imie, nazwisko, wiek, nr_telefonu, email, ulica, adres_kod_pocztowy, id_pakietu
    INTO v_imie, v_nazwisko, v_wiek, v_nr_telefonu, v_email, v_ulica, v_adres_kod_pocztowy, v_id_pakietu
    FROM klient
    WHERE id_klienta = p_id_klienta;


    DBMS_OUTPUT.PUT_LINE('Informacje o kliencie (ID ' || p_id_klienta || '):');
    DBMS_OUTPUT.PUT_LINE('Imię: ' || v_imie);
    DBMS_OUTPUT.PUT_LINE('Nazwisko: ' || v_nazwisko);
    DBMS_OUTPUT.PUT_LINE('Wiek: ' || v_wiek);
    DBMS_OUTPUT.PUT_LINE('Numer telefonu: ' || v_nr_telefonu);
    DBMS_OUTPUT.PUT_LINE('Email: ' || v_email);
    DBMS_OUTPUT.PUT_LINE('Ulica: ' || v_ulica);
    DBMS_OUTPUT.PUT_LINE('Kod pocztowy: ' || v_adres_kod_pocztowy);
    DBMS_OUTPUT.PUT_LINE('ID Pakietu: ' || v_id_pakietu);

EXCEPTION
    WHEN brak_uzytkownika THEN
            DBMS_OUTPUT.PUT_LINE('Klient o podanym ID nie istnieje.');
        RAISE brak_uzytkownika;
END pobierz_informacje_klienta;
/

DECLARE
    v_id_klienta INTEGER := 4; 

BEGIN
        pobierz_informacje_klienta(v_id_klienta);
END;
/

--3. **dodaj_nowego_klienta:**
CREATE SEQUENCE klient_seq
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE PROCEDURE dodaj_nowego_klienta (
    p_imie VARCHAR2,
    p_nazwisko VARCHAR2,
    p_wiek INTEGER,
    p_nr_telefonu INTEGER,
    p_email VARCHAR2,
    p_ulica VARCHAR2,
    p_adres_kod_pocztowy VARCHAR2,
    p_id_pakietu INTEGER
) AS
 
    brak_id_klienta EXCEPTION;
    PRAGMA EXCEPTION_INIT(brak_id_klienta, -20001);

    v_id_klienta INTEGER;
BEGIN
    BEGIN
    
        SELECT klient_seq.NEXTVAL INTO v_id_klienta FROM DUAL;
        
        IF v_id_klienta IS NULL THEN
            RAISE_APPLICATION_ERROR(-20001, 'Nie udało się pobrać nowego ID klienta.');
        END IF;

        INSERT INTO klient (id_klienta, imie, nazwisko, wiek, nr_telefonu, email, ulica, adres_kod_pocztowy, id_pakietu)
        VALUES (v_id_klienta, p_imie, p_nazwisko, p_wiek, p_nr_telefonu, p_email, p_ulica, p_adres_kod_pocztowy, p_id_pakietu);

        DBMS_OUTPUT.PUT_LINE('Dodano nowego klienta:');
        DBMS_OUTPUT.PUT_LINE('ID Klienta: ' || v_id_klienta);
        DBMS_OUTPUT.PUT_LINE('Imię: ' || p_imie);
        DBMS_OUTPUT.PUT_LINE('Nazwisko: ' || p_nazwisko);
        DBMS_OUTPUT.PUT_LINE('Wiek: ' || p_wiek);
        DBMS_OUTPUT.PUT_LINE('Nr Telefonu: ' || p_nr_telefonu);
        DBMS_OUTPUT.PUT_LINE('Email: ' || p_email);
        DBMS_OUTPUT.PUT_LINE('Ulica: ' || p_ulica);
        DBMS_OUTPUT.PUT_LINE('Adres Kod Pocztowy: ' || p_adres_kod_pocztowy);
        DBMS_OUTPUT.PUT_LINE('ID Pakietu: ' || p_id_pakietu);

        COMMIT;
    EXCEPTION
        WHEN brak_id_klienta THEN
            DBMS_OUTPUT.PUT_LINE('Nie udało się pobrać nowego ID klienta.');
            ROLLBACK;
    END;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLCODE || ' - ' || SQLERRM);
        ROLLBACK;
END dodaj_nowego_klienta;
/


BEGIN
    
    BEGIN
        dodaj_nowego_klienta('Jan', 'Kowalski', 30, 123456789, 'jan.kowalski@example.com', 'ul. Prosta 1', '33-230', 1);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd podczas dodawania nowego klienta.');
    END;
END;
/


--4. **sprawdz_haslo:**
CREATE OR REPLACE PROCEDURE sprawdz_haslo (
    p_id_klienta IN INTEGER
) IS
    v_haslo VARCHAR2(50 CHAR);
    v_error_message VARCHAR2(100);

    brak_klienta EXCEPTION;
    PRAGMA EXCEPTION_INIT(brak_klienta, -20001);
BEGIN
    BEGIN
   
        SELECT haslo INTO v_haslo
        FROM klient
        WHERE id_klienta = p_id_klienta;

        IF LENGTH(v_haslo) < 8 THEN
            v_error_message := 'Hasło musi mieć co najmniej 8 znaków.';
        ELSIF NOT REGEXP_LIKE(v_haslo, '[[:upper:]]') THEN
            v_error_message := 'Hasło musi zawierać co najmniej jedną wielką literę.';
        ELSIF NOT REGEXP_LIKE(v_haslo, '[[:lower:]]') THEN
            v_error_message := 'Hasło musi zawierać co najmniej jedną małą literę.';
        ELSIF NOT REGEXP_LIKE(v_haslo, '[[:digit:]]') THEN
            v_error_message := 'Hasło musi zawierać co najmniej jedną cyfrę.';
        ELSIF NOT REGEXP_LIKE(v_haslo, '[[:punct:]]') THEN
            v_error_message := 'Hasło musi zawierać co najmniej jeden znak specjalny.';
        ELSE
            v_error_message := NULL;
        END IF;


        IF v_error_message IS NOT NULL THEN
            DBMS_OUTPUT.PUT_LINE('ID Klienta: ' || p_id_klienta || ', Komunikat: ' || v_error_message);
        ELSE
            DBMS_OUTPUT.PUT_LINE('ID Klienta: ' || p_id_klienta || ', Hasło spełnia warunki.');
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'Nie znaleziono klienta o podanym ID.');
    END;

EXCEPTION
    WHEN brak_klienta THEN
        DBMS_OUTPUT.PUT_LINE('Nie znaleziono klienta o podanym ID.');
 
END sprawdz_haslo;
/


BEGIN
    sprawdz_haslo(p_id_klienta => 1);
END;
/


INSERT INTO klient (id_klienta, imie, nazwisko, wiek, nr_telefonu, email, haslo, ulica, adres_kod_pocztowy, id_pakietu)
VALUES (12, 'Jan', 'Nowak', 25, 123456789, 'jan.nowak@example.com', 'krotke', 'Ulica Testowa', '33-233', 1);

BEGIN
    sprawdz_haslo(p_id_klienta => 12);
END;
/

----------------------------
dodatkowa funkcja:

CREATE OR REPLACE FUNCTION aktualizuj_cene_filmu_z_rabatem(
    p_id_filmu INTEGER,
    p_id_klienta INTEGER
) RETURN INTEGER AS
    v_rabat INTEGER := 50;
BEGIN
    UPDATE wypozyczenia
    SET kwota_koncowa = kwota_koncowa * (1 - v_rabat / 100)
    WHERE filmy_i_seriale_id_f_s = p_id_filmu
      AND klient_id_klienta = p_id_klienta;

    IF SQL%ROWCOUNT < 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Brak zaktualizowanych rekordów.');
    END IF;

    RETURN SQL%ROWCOUNT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20003, 'Nie znaleziono danych.');
    WHEN VALUE_ERROR THEN
        RAISE_APPLICATION_ERROR(-20002, 'Błędna wartość.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Wystąpił błąd: ' || SQLCODE || ' - ' || SQLERRM);
END aktualizuj_cene_filmu_z_rabatem;
/

DECLARE
    v_result INTEGER;
BEGIN
    v_result := aktualizuj_cene_filmu_z_rabatem(
                    p_id_filmu => 1,
                    p_id_klienta => 8
                );

    IF v_result >= 0 THEN
        DBMS_OUTPUT.PUT_LINE('Liczba zaktualizowanych rekordów: ' || v_result);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Błąd.'); 
    END IF;
END;
/


------------------------------

gigantyczne funkcje
--1.
CREATE OR REPLACE PROCEDURE wypozyczenia_filmu (
    p_klient_id INT,
    p_film_id INT
)
AS
    TYPE WypozyczeniaCollection IS TABLE OF wypozyczenia%ROWTYPE;
    v_wypozyczenia_list WypozyczeniaCollection := WypozyczeniaCollection();
    v_error_message VARCHAR2(4000);
    v_liczba_wypozyczen NUMBER;
    czy_pelnoletni BOOLEAN;
    v_wiek_ograniczenia INT;
    v_wiek_uzytkownika INT;
    v_wynik VARCHAR2(100);
    v_cena NUMBER;
    v_id_wypozyczenia INTEGER;
    v_srednia_ocena NUMBER;
    v_data_oddania DATE;
    v_id_gatunku INTEGER;  -- Dodane pole dla ID gatunku
    v_nazwa_gatunku VARCHAR2(100);  -- Dodane pole dla nazwy gatunku
    v_id_pakietu INTEGER; -- Dodane pole dla ID pakietu
    v_result INTEGER; -- Dodana deklaracja zmiennej

BEGIN
    -- Pobranie ID gatunku filmu/serialu
    BEGIN
        SELECT gatunek_id_gatunku INTO v_id_gatunku
        FROM filmy_i_seriale
        WHERE id_f_s = p_film_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_error_message := 'Nie ma filmu o podanym ID. Spróbuj wypożyczyć inny film.';
            DBMS_OUTPUT.PUT_LINE(v_error_message);
            RAISE_APPLICATION_ERROR(-20001, v_error_message);
            RETURN;
    END;

    -- Pobranie nazwy gatunku filmu/serialu
    BEGIN
        SELECT nazwa INTO v_nazwa_gatunku
        FROM gatunek
        WHERE id_gatunku = v_id_gatunku;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono nazwy gatunku dla danego filmu/serialu.');
            RETURN;
    END;

    -- Sprawdzenie wiekowej ograniczenia filmu
    BEGIN
        SELECT wiek_ograniczenia INTO v_wiek_ograniczenia
        FROM gatunek
        WHERE id_gatunku = v_id_gatunku;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono wiekowego ograniczenia dla danego gatunku.');
            RETURN;
    END;

    IF v_wiek_ograniczenia = 18 THEN
        -- Sprawdzenie, czy użytkownik jest pełnoletni
        BEGIN
            SELECT wiek INTO v_wiek_uzytkownika
            FROM klient
            WHERE id_klienta = p_klient_id;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                v_error_message := 'Nie ma takiego klienta. Spróbuj wybrać inne ID klienta.';
                DBMS_OUTPUT.PUT_LINE(v_error_message);
                RAISE_APPLICATION_ERROR(-20001, v_error_message);
                RETURN;
        END;

        czy_pelnoletni := SprawdzCzyUzytkownikPelnoletni(p_klient_id);

        IF NOT czy_pelnoletni THEN
            v_error_message := 'Użytkownik nie jest pełnoletni. Wypożyczenie nie jest możliwe.';
            DBMS_OUTPUT.PUT_LINE(v_error_message);
            RAISE_APPLICATION_ERROR(-20001, v_error_message);
        END IF;

        IF v_wiek_uzytkownika < 18 THEN
            v_error_message := 'Film jest przeznaczony dla osób pełnoletnich. Wypożyczenie nie jest możliwe.';
            DBMS_OUTPUT.PUT_LINE(v_error_message);
            RAISE_APPLICATION_ERROR(-20001, v_error_message);
        END IF;
    END IF;

    -- Pobranie liczby wypożyczeń dla klienta
    v_liczba_wypozyczen := ZwrocLiczbeWypozyczen(p_klient_id);

    -- Wywołanie funkcji zmieniającej pakiet po wypożyczeniu
    IF v_liczba_wypozyczen > 5 THEN
        v_wynik := ZmianaPakietuPoWypozyczeniu(p_klient_id);
    END IF;

    -- Pobranie ceny z tabeli filmy_i_seriale
    BEGIN
        SELECT cena INTO v_cena
        FROM filmy_i_seriale
        WHERE id_f_s = p_film_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono ceny dla danego filmu/serialu.');
            RETURN;
    END;

    -- Pobranie kolejnego dostępnego id_wypozyczenia
    BEGIN
        SELECT MAX(id_wypozyczenia) + 1 INTO v_id_wypozyczenia FROM wypozyczenia;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Błąd podczas pobierania ID wypożyczenia.');
            RETURN;
    END;

    -- Jeśli v_id_wypozyczenia jest NULL, ustaw na 1
    IF v_id_wypozyczenia IS NULL THEN
        v_id_wypozyczenia := 1;
    END IF;

    -- Wstawienie rekordu wypożyczenia do tabeli
    BEGIN
        INSERT INTO wypozyczenia (id_wypozyczenia, klient_id_klienta, administrator_id_ad, filmy_i_seriale_id_f_s, data_wypozyczenia, data_oddania, kwota_koncowa, rodzaj_platnosci_id_p)
        VALUES (v_id_wypozyczenia, p_klient_id, 1, p_film_id, SYSDATE, SYSDATE + 14, v_cena, 1);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Błąd podczas wstawiania rekordu wypożyczenia.');
            RETURN;
    END;

    -- Wynik wstawiania rekordu wypożyczenia
    DBMS_OUTPUT.PUT_LINE('Dodałeś/aś film/serial do swojej listy wypożyczeń');

    -- Informacje o filmie
    DBMS_OUTPUT.PUT_LINE('/**Informacje o twoim filmie/serialu:**\');
    DBMS_OUTPUT.PUT_LINE('Cena przed rabatem: ' || v_cena);
    DBMS_OUTPUT.PUT_LINE('Data oddania: ' || (SYSDATE + 14));

    -- Przerwa
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE(' ');

    -- Obliczanie średniej oceny filmu
    BEGIN
        v_srednia_ocena := ObliczSredniaOceneFilmu(p_film_id);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Błąd podczas obliczania średniej oceny filmu.');
            RETURN;
    END;

    IF v_srednia_ocena IS NOT NULL AND v_srednia_ocena >= 0 THEN
        DBMS_OUTPUT.PUT_LINE('Średnia ocena filmu: ' || v_srednia_ocena);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Brak danych lub błąd przy obliczaniu średniej oceny.');
    END IF;

    -- Informacje o gatunku i popularności
    DBMS_OUTPUT.PUT_LINE('Gatunek: ' || v_nazwa_gatunku);
    DBMS_OUTPUT.PUT_LINE('Popularność tego gatunku wynosi: ' || popularnosc_gatunku(v_id_gatunku));

    -- Przerwa
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE(' ');

    -- Informacje o koncie
    DBMS_OUTPUT.PUT_LINE('/**Informacje o twoim koncie:**\');
    DBMS_OUTPUT.PUT_LINE('Inne wypożyczone filmy');
    BEGIN
        SELECT * BULK COLLECT INTO v_wypozyczenia_list
        FROM wypozyczenia
        WHERE klient_id_klienta = p_klient_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Brak informacji o wypożyczeniach dla danego klienta.');
            RETURN;
    END;

    -- Wyświetlenie informacji o wszystkich wypożyczonych filmach/serialach
    FOR i IN 1..v_wypozyczenia_list.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('Wypożyczony film/serial ' || i || ': ' || v_wypozyczenia_list(i).filmy_i_seriale_id_f_s);
        -- Dodaj dodatkowe informacje o wypożyczeniach, jeśli są potrzebne
    END LOOP;

    -- Wynik funkcji zmieniającej pakiet po wypożyczeniu
    v_wynik := ZmianaPakietuPoWypozyczeniu(p_klient_id);
    DBMS_OUTPUT.PUT_LINE(v_wynik);

    -- Dodanie klienta do grupy rabatowej i aktualizacja ceny z rabatem
    BEGIN
        -- Pobranie id_pakietu klienta
        BEGIN
            SELECT id_pakietu INTO v_id_pakietu
            FROM klient
            WHERE id_klienta = p_klient_id;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('Nie znaleziono pakietu klienta.');
                RETURN;
        END;

        -- Sprawdzenie, czy klient ma pakiet o id równym 1
        IF v_id_pakietu = 1 THEN
            v_result := dodaj_klienta_do_grupy(p_klient_id);

            -- Aktualizacja ceny z rabatem
            IF v_result = 1 THEN
                BEGIN
                    v_result := aktualizuj_cene_filmu_z_rabatem(p_id_filmu => p_film_id, p_id_klienta => p_klient_id);
                    DBMS_OUTPUT.PUT_LINE('Twoja cena została zaktualizowana z rabatem dla stałego klienta.');
                    COMMIT;
                EXCEPTION
                    WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('Błąd podczas aktualizacji ceny z rabatem.');
                        RETURN;
                END;
            END IF;
        END IF;
    END;

    -- Pobranie zaktualizowanej kwoty po rabacie
    BEGIN
        SELECT kwota_koncowa INTO v_cena
        FROM wypozyczenia
        WHERE id_wypozyczenia = v_id_wypozyczenia;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono kwoty koncowej po rabacie.');
            RETURN;
    END;

    -- Wyświetlenie zaktualizowanej kwoty
    DBMS_OUTPUT.PUT_LINE('Zaktualizowana cena po rabacie: ' || v_cena);

    COMMIT;
END;
/

DECLARE
    v_klient_id INT := 3; 
    v_film_id INT := 3; 
BEGIN
    wypozyczenia_filmu(v_klient_id, v_film_id);
END;
/


2.
CREATE OR REPLACE PROCEDURE zarzadzanie(
    p_id_recenzji INTEGER, 
    p_email VARCHAR2, 
    p_nowy_adres_email VARCHAR2,
    p_nowy_adres VARCHAR2,
    p_nowy_opis VARCHAR2,
    p_nazwa_gatunku VARCHAR2,
    p_wiek_ograniczenia INTEGER
) AS
    v_id_filmu INTEGER;
    v_tytul VARCHAR2(60 CHAR);
    v_opis VARCHAR2(1000 CHAR);
    v_cursor SYS_REFCURSOR;
    v_uzytkownik_rec klient%ROWTYPE;
    v_wynik INTEGER;
    wypozyczenie INTEGER;
    v_cena NUMBER;
    v_nowy_limit INTEGER := 80; 
    v_dodany_do_grupy INTEGER;
    v_liczba_zaktualizowanych INTEGER;
    v_id_gatunku INTEGER;
    v_id_klienta INTEGER; 
    v_kara NUMBER;
    v_data_wypozyczenia DATE; 
    v_data_oddania DATE;   
    wypozyczenia_ids SYS_REFCURSOR;

    klient_nieznaleziony EXCEPTION;
    brak_adresu_klienta EXCEPTION;
    email_nieznaleziony EXCEPTION;
    haslo_nieznalezione EXCEPTION;
    brak_adresu EXCEPTION;
    cena_nieznaleziona EXCEPTION;
    limit_nieznaleziony EXCEPTION;
    kara_nieznaleziona EXCEPTION;
    gatunek_nieznaleziony EXCEPTION;
 	blad_aktualizacji EXCEPTION;

BEGIN
    -- Znajdź filmy z daną recenzją
    v_cursor := ZnajdzFilmyZDanaRecenzja(p_id_recenzji);
    LOOP
        FETCH v_cursor INTO v_id_filmu, v_tytul, v_opis;
        EXIT WHEN v_cursor%NOTFOUND;
    END LOOP;
    CLOSE v_cursor;

    -- Znajdź użytkownika po emailu
    BEGIN
        v_cursor := ZnajdzUzytkownikaPoEmailu(p_email);
        FETCH v_cursor INTO v_uzytkownik_rec;
        CLOSE v_cursor;

        IF v_uzytkownik_rec.id_klienta IS NULL THEN
            RAISE email_nieznaleziony;
        END IF;
    EXCEPTION
        WHEN email_nieznaleziony THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono użytkownika o podanym emailu.');
            RETURN;
    END;

   
    DBMS_OUTPUT.PUT_LINE('***/INFORMACJE ZNALEZIONEGO KLIENTA\***');
    DBMS_OUTPUT.PUT_LINE('ID użytkownika: ' || v_uzytkownik_rec.id_klienta);
    DBMS_OUTPUT.PUT_LINE('Nazwa użytkownika: ' || v_uzytkownik_rec.imie || ' ' || v_uzytkownik_rec.nazwisko);

    -- Aktualizacja e-maila użytkownika
    zmien_email_uzytkownika(v_uzytkownik_rec.id_klienta, p_nowy_adres_email);

    -- Sprawdzenie hasła użytkownika
    BEGIN
        sprawdz_haslo(v_uzytkownik_rec.id_klienta);
    EXCEPTION
        WHEN haslo_nieznalezione THEN
            DBMS_OUTPUT.PUT_LINE('Hasło nie zostało znalezione.');
            RETURN;
    END;

    -- Zmiana adresu użytkownika
    BEGIN
        v_liczba_zaktualizowanych := zmien_adres_uzytkownika2(v_uzytkownik_rec.id_klienta, p_nowy_adres);

        IF v_liczba_zaktualizowanych > 0 THEN
            DBMS_OUTPUT.PUT_LINE('Adres zaktualizowany dla ' || v_liczba_zaktualizowanych || ' klienta.');
            DBMS_OUTPUT.PUT_LINE('Nowy adres: ' || p_nowy_adres);
        ELSIF v_liczba_zaktualizowanych = 0 THEN
            RAISE brak_adresu_klienta;
        ELSE
            RAISE blad_aktualizacji;
        END IF;
    EXCEPTION
        WHEN brak_adresu_klienta THEN
            DBMS_OUTPUT.PUT_LINE('Brak klienta o podanym ID.');
            RETURN;
        WHEN blad_aktualizacji THEN
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd podczas aktualizacji adresu.');
            RETURN;
    END;

   
    DBMS_OUTPUT.PUT_LINE('***/WPROWADZONE ZMIANY DLA ZNALEZIONEGO KLIENTA\***');
    v_dodany_do_grupy := dodaj_klienta_do_grupy(v_uzytkownik_rec.id_klienta);

    -- Aktualizacja ceny filmu z rabatem
    v_wynik := aktualizuj_cene_filmu_z_rabatem(p_id_filmu => v_id_filmu, p_id_klienta => v_uzytkownik_rec.id_klienta);

    -- Zwiększenie limitu wypożyczeń
    BEGIN
        zwieksz_limit_wypozyczen(p_id_klienta => v_uzytkownik_rec.id_klienta, p_nowy_limit => v_nowy_limit);
        DBMS_OUTPUT.PUT_LINE('Zaktualizowany limit wypożyczeń: ' || v_nowy_limit);
    EXCEPTION
        WHEN limit_nieznaleziony THEN
            DBMS_OUTPUT.PUT_LINE('Limit wypożyczeń nie został znaleziony.');
            RETURN;
    END;

    DBMS_OUTPUT.PUT_LINE('***/WPROWADZONE ZMIANY DLA FILMU KLIENTA\***');

    -- Aktualizacja opisu filmu
    BEGIN
        AktualizujOpisFilmu(v_id_filmu, p_nowy_opis);
        DBMS_OUTPUT.PUT_LINE('Zaktualizowany opis filmu lub serialu: ' || p_nowy_opis);
    EXCEPTION
        WHEN brak_adresu THEN
            DBMS_OUTPUT.PUT_LINE('Adres nie został znaleziony.');
            RETURN;
    END;

    -- Sprawdzenie kary za opóźniony zwrot
    OPEN wypozyczenia_ids FOR
        SELECT id_wypozyczenia, kwota_koncowa, data_wypozyczenia, data_oddania
        FROM wypozyczenia
        WHERE FILMY_I_SERIALE_ID_F_S = v_id_filmu
          AND klient_id_klienta = v_uzytkownik_rec.id_klienta
          AND data_oddania - data_wypozyczenia > 14;

    BEGIN
        LOOP
            FETCH wypozyczenia_ids INTO wypozyczenie, v_cena, v_data_wypozyczenia, v_data_oddania;
            EXIT WHEN wypozyczenia_ids%NOTFOUND;

            DBMS_OUTPUT.PUT_LINE('Różnica między data_oddania a data_wypozyczenia: ' || (v_data_oddania - v_data_wypozyczenia));

            v_kara := nalicz_kare(wypozyczenie);

            IF v_kara > 0 THEN
                DBMS_OUTPUT.PUT_LINE('Naliczono karę za opóźniony zwrot dla klienta ' || v_uzytkownik_rec.id_klienta);
                DBMS_OUTPUT.PUT_LINE('Naliczona kara wynosi: ' || v_kara);
            END IF;
        END LOOP;
    EXCEPTION
        WHEN kara_nieznaleziona THEN
            DBMS_OUTPUT.PUT_LINE('Kara nie została znaleziona.');
            RETURN;
    END;

    CLOSE wypozyczenia_ids;

    -- Dodanie nowego gatunku automatycznie
    BEGIN
        dodaj_nowy_gatunek_automatycznie(p_nazwa_gatunku, p_wiek_ograniczenia);
    EXCEPTION
        WHEN gatunek_nieznaleziony THEN
            DBMS_OUTPUT.PUT_LINE('Gatunek nie został znaleziony.');
            RETURN;
    END;

EXCEPTION
    WHEN klient_nieznaleziony THEN
        DBMS_OUTPUT.PUT_LINE('Nie znaleziono klienta.');
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Nie znaleziono danych.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLCODE || ' - ' || SQLERRM);
END zarzadzanie;
/

DECLARE
    v_id_recenzji INTEGER := 3; 
    v_email VARCHAR2(50 CHAR) := 'nowy_email90@example.com';
    v_nowy_adres_email VARCHAR2(50 CHAR) := 'nowy_email91@example.com';
    v_nowy_adres VARCHAR2(100 CHAR) := 'Nowy Adres Testowy';
    v_nowy_opis VARCHAR2(1000 CHAR) := 'Nowy Opis Filmu';
    v_nazwa_gatunku VARCHAR2(100) := 'Nowy Gatunek';
    v_wiek_ograniczenia INTEGER := 16;
BEGIN
    zarzadzanie(
        v_id_recenzji, 
        v_email, 
        v_nowy_adres_email, 
        v_nowy_adres, 
        v_nowy_opis, 
        v_nazwa_gatunku, 
        v_wiek_ograniczenia
    );
END;
/

CREATE OR REPLACE PACKAGE PAKIET AS
    FUNCTION ZmianaPakietuPoWypozyczeniu(p_id_klienta INT) RETURN VARCHAR2;
    FUNCTION ObliczSredniaOceneFilmu(p_id_filmu_serialu INT) RETURN NUMBER;
    FUNCTION ZnajdzFilmyZDanaRecenzja(p_ocena_min INT) RETURN SYS_REFCURSOR;
    FUNCTION popularnosc_gatunku(p_id_gatunku INTEGER) RETURN INTEGER;
    FUNCTION aktualizuj_cene_filmu_z_rabatem(p_id_filmu INTEGER, p_nowa_cena INTEGER, p_id_klienta INTEGER) RETURN INTEGER;
    FUNCTION zwieksz_popularnosc_po_wypozyczeniu(p_id_filmu INTEGER) RETURN INTEGER;
    PROCEDURE AktualizujOpisFilmu(p_id_filmu_serialu IN NUMBER, p_nowy_opis IN VARCHAR2);
    PROCEDURE zwieksz_limit_wypozyczen(p_id_klienta INTEGER, p_nowy_limit INTEGER);
    PROCEDURE dodaj_nowy_gatunek_automatycznie(p_nazwa VARCHAR2, p_wiek_ograniczenia INTEGER);
    PROCEDURE dodaj_ocene_i_srednia(p_id_filmu INTEGER, p_ocena INTEGER);
    PROCEDURE usun_film(p_id_f_s NUMBER);
    PROCEDURE wypozyczenia_filmu ( p_klient_id INT, p_film_id INT);
    PROCEDURE zarzadzanie(
    p_id_recenzji INTEGER, 
    p_email VARCHAR2, 
    p_nowy_adres_email VARCHAR2,
    p_nowy_adres VARCHAR2,
    p_nowy_opis VARCHAR2,
    p_nazwa_gatunku VARCHAR2,
    p_wiek_ograniczenia INTEGER);
END PAKIET;
/

CREATE OR REPLACE PACKAGE BODY PAKIET AS
    FUNCTION ZmianaPakietuPoWypozyczeniu(p_id_klienta INT) RETURN VARCHAR2 IS
        v_liczba_wypozyczen INT;
        v_nowy_pakiet INT;
        v_result VARCHAR2(100);

        wyjatek EXCEPTION;
        PRAGMA EXCEPTION_INIT(wyjatek, -20001);

    BEGIN
        BEGIN
            SELECT COUNT(*) INTO v_liczba_wypozyczen FROM wypozyczenia WHERE klient_id_klienta = p_id_klienta;

            IF v_liczba_wypozyczen > 5 THEN
                BEGIN
                    SELECT k.id_pakietu INTO v_nowy_pakiet
                    FROM klient k
                    WHERE k.id_klienta = p_id_klienta;

                    IF v_nowy_pakiet > 1 THEN
                        BEGIN
                            UPDATE klient 
                            SET id_pakietu = v_nowy_pakiet - 1
                            WHERE id_klienta = p_id_klienta;
                            v_result := 'Gratulacje zmienił Ci się pakiet!';
                        EXCEPTION
                            WHEN NO_DATA_FOUND THEN
                                RAISE wyjatek;
                        END;
                    ELSE
                        v_result := 'Masz już najniższy pakiet.';
                    END IF;
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        -- Rzucenie własnego wyjątku zamiast NO_DATA_FOUND
                        RAISE wyjatek;
                END;
            ELSE
                v_result := 'Wypożycz jeszcze trochę filmów, by zmienić pakiet';
            END IF;
        END;

        RETURN v_result;

        EXCEPTION
            WHEN wyjatek THEN
                v_result := 'Brak danych klienta.';
                RETURN v_result;
    END ZmianaPakietuPoWypozyczeniu;

    FUNCTION ObliczSredniaOceneFilmu(p_id_filmu_serialu INT) RETURN NUMBER IS
         v_srednia NUMBER;
    wyjatek_zero EXCEPTION;
    PRAGMA EXCEPTION_INIT(wyjatek_zero, -2091);

BEGIN
    BEGIN
        SELECT AVG(ocena) INTO v_srednia
        FROM recenzja_filmu_i_serialu
        WHERE filmy_i_seriale_id_f_s = p_id_filmu_serialu;

        IF v_srednia IS NULL THEN
           
            RAISE wyjatek_zero;
        END IF;

        RETURN v_srednia;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            
            RAISE wyjatek_zero;
        WHEN wyjatek_zero THEN
        
            RETURN -2; 
        WHEN VALUE_ERROR THEN
            RETURN -3; 
    END;

    EXCEPTION
        WHEN wyjatek_zero THEN
            RETURN NULL;

    END ObliczSredniaOceneFilmu;

    FUNCTION ZnajdzFilmyZDanaRecenzja(p_ocena_min INT) RETURN SYS_REFCURSOR IS
            v_result_cursor SYS_REFCURSOR;
BEGIN
    BEGIN
        OPEN v_result_cursor FOR
            SELECT id_f_s, tytul, opis
            FROM filmy_i_seriale
            WHERE id_f_s IN (SELECT filmy_i_seriale_id_f_s FROM recenzja_filmu_i_serialu WHERE ocena >= p_ocena_min);

        IF v_result_cursor%NOTFOUND THEN
            CLOSE v_result_cursor;
            RAISE_APPLICATION_ERROR(-20002, 'Nie ma takiej recenzji.');
        END IF;
    EXCEPTION
        WHEN CURSOR_ALREADY_OPEN THEN
            CLOSE v_result_cursor;
            RAISE;
        WHEN INVALID_CURSOR THEN
            CLOSE v_result_cursor;
            RAISE;
    END;

    RETURN v_result_cursor;
    END ZnajdzFilmyZDanaRecenzja;

    FUNCTION popularnosc_gatunku(p_id_gatunku INTEGER) RETURN INTEGER IS
        v_ilosc_wypozyczen INTEGER;
BEGIN
    BEGIN
        SELECT COUNT(*)
        INTO v_ilosc_wypozyczen
        FROM wypozyczenia w
        JOIN filmy_i_seriale f ON w.filmy_i_seriale_id_f_s = f.id_f_s
        WHERE f.gatunek_id_gatunku = p_id_gatunku;

        IF v_ilosc_wypozyczen < 0 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Nie ma gatunku o podanym ID.');
        END IF;
    EXCEPTION
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20001, 'Błąd przy liczeniu ilości wypożyczeń.');
        
    END;

    RETURN v_ilosc_wypozyczen;
    END popularnosc_gatunku;

   FUNCTION aktualizuj_cene_filmu_z_rabatem(p_id_filmu INTEGER, p_nowa_cena INTEGER, p_id_klienta INTEGER) RETURN INTEGER IS
    v_rabat INTEGER := 10;
    v_id_filmu INTEGER;
    v_id_klienta INTEGER;

    film_nie_znaleziony EXCEPTION;
    klient_nie_znaleziony EXCEPTION;
    error_wyjatek EXCEPTION;
    PRAGMA EXCEPTION_INIT(film_nie_znaleziony, -20001);
    PRAGMA EXCEPTION_INIT(klient_nie_znaleziony, -20002);
    PRAGMA EXCEPTION_INIT(error_wyjatek, -20003);

BEGIN

    SELECT id_f_s INTO v_id_filmu
    FROM filmy_i_seriale
    WHERE id_f_s = p_id_filmu;

    IF v_id_filmu IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('Nie znaleziono filmu.');
        RAISE film_nie_znaleziony;
    END IF;

    SELECT id_klienta INTO v_id_klienta
    FROM klient
    WHERE id_klienta = p_id_klienta;

    IF v_id_klienta IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('Nie znaleziono klienta.');
        RAISE klient_nie_znaleziony;
    END IF;

    UPDATE filmy_i_seriale
    SET cena = p_nowa_cena * (1 - v_rabat / 100)
    WHERE id_f_s = p_id_filmu;

    RETURN SQL%ROWCOUNT;

EXCEPTION
    WHEN error_wyjatek THEN
        DBMS_OUTPUT.PUT_LINE('Błąd wartości.');
        RETURN -1; 
    WHEN film_nie_znaleziony THEN
        RETURN -2; 
    WHEN klient_nie_znaleziony THEN
        RETURN -3; 
END aktualizuj_cene_filmu_z_rabatem;

    FUNCTION zwieksz_popularnosc_po_wypozyczeniu(p_id_filmu INTEGER) RETURN INTEGER IS
    v_ilosc_wypozyczen INTEGER;
    v_popularnosc INTEGER := 0;

    wypozyczenie_nie_znalezione EXCEPTION;
    error_wyjatek EXCEPTION;
    PRAGMA EXCEPTION_INIT(wypozyczenie_nie_znalezione, -20001);
    PRAGMA EXCEPTION_INIT(error_wyjatek, -20002);

BEGIN
    SELECT COUNT(*) INTO v_ilosc_wypozyczen
    FROM wypozyczenia
    WHERE filmy_i_seriale_id_f_s = p_id_filmu;

    IF v_ilosc_wypozyczen = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Nie ma takiego wypożyczenia.');
        RAISE wypozyczenie_nie_znalezione;
    END IF;

    v_popularnosc := v_ilosc_wypozyczen * 10;

    DBMS_OUTPUT.PUT_LINE('Popularność filmu wynosi ' || v_popularnosc);

    RETURN v_popularnosc;

EXCEPTION
    WHEN error_wyjatek THEN
        DBMS_OUTPUT.PUT_LINE('Błąd wartości.');
        RETURN -1; 
    WHEN wypozyczenie_nie_znalezione THEN
        RETURN -2;
END zwieksz_popularnosc_po_wypozyczeniu;


    PROCEDURE AktualizujOpisFilmu(p_id_filmu_serialu IN NUMBER, p_nowy_opis IN VARCHAR2) IS
        
    film_nie_znaleziony EXCEPTION;
    PRAGMA EXCEPTION_INIT(film_nie_znaleziony, -20001);

BEGIN
    UPDATE filmy_i_seriale SET opis = p_nowy_opis WHERE id_f_s = p_id_filmu_serialu;
    DBMS_OUTPUT.PUT_LINE('Opis filmu lub serialu zaktualizowany.');

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Film lub serial o podanym identyfikatorze nie istnieje.');
          
            RAISE film_nie_znaleziony;
    END AktualizujOpisFilmu;

    PROCEDURE zwieksz_limit_wypozyczen(p_id_klienta INTEGER, p_nowy_limit INTEGER) IS
        
    umowa_nie_znaleziona EXCEPTION;
    PRAGMA EXCEPTION_INIT(umowa_nie_znaleziona, -20001);

    v_umowa_id_umowy umowy.id_umowy%TYPE;
BEGIN
    BEGIN
        SELECT id_umowy INTO v_umowa_id_umowy
        FROM umowy
        WHERE klient_id_klienta = p_id_klienta;

        IF v_umowa_id_umowy IS NOT NULL THEN
            UPDATE umowy
            SET kwota_koncowa = p_nowy_limit
            WHERE id_umowy = v_umowa_id_umowy;

            DBMS_OUTPUT.PUT_LINE('Zaktualizowano limit wypożyczeń klienta o ID ' || p_id_klienta);
        ELSE
           
            RAISE umowa_nie_znaleziona;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        
            RAISE umowa_nie_znaleziona;
    END;

    EXCEPTION
        WHEN umowa_nie_znaleziona THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono umowy dla klienta o ID ' || p_id_klienta);
    END zwieksz_limit_wypozyczen;

    PROCEDURE dodaj_nowy_gatunek_automatycznie(p_nazwa VARCHAR2, p_wiek_ograniczenia INTEGER) IS
        
    dane_nie_znalezione EXCEPTION;
    PRAGMA EXCEPTION_INIT(dane_nie_znalezione, -20001);

    v_id_gatunku INTEGER;
BEGIN
    BEGIN

        SELECT MAX(id_gatunku) + 1 INTO v_id_gatunku FROM gatunek;

        IF v_id_gatunku IS NULL THEN
            v_id_gatunku := 1;
        END IF;
    EXCEPTION
        WHEN dane_nie_znalezione THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono danych przy pobieraniu ID gatunku.');
    
            RAISE dane_nie_znalezione;
    END;

    BEGIN
        INSERT INTO gatunek(id_gatunku, nazwa, wiek_ograniczenia)
        VALUES (v_id_gatunku, p_nazwa, p_wiek_ograniczenia);

        DBMS_OUTPUT.PUT_LINE('Dodano nowy gatunek:');
        DBMS_OUTPUT.PUT_LINE('ID Gatunku: ' || v_id_gatunku);
        DBMS_OUTPUT.PUT_LINE('Nazwa: ' || p_nazwa);
        DBMS_OUTPUT.PUT_LINE('Wiek Ograniczenia: ' || p_wiek_ograniczenia);
    EXCEPTION
        WHEN dane_nie_znalezione THEN
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd podczas wstawiania nowego gatunku: ' || SQLERRM);
            RAISE dane_nie_znalezione;
    END;
    END dodaj_nowy_gatunek_automatycznie;

    PROCEDURE dodaj_ocene_i_srednia(p_id_filmu INTEGER, p_ocena INTEGER) IS
           id_recenzji_nie_znalezione EXCEPTION;
    oceny_nie_znalezione EXCEPTION;
    zero_wyjatek EXCEPTION;
    PRAGMA EXCEPTION_INIT(id_recenzji_nie_znalezione, -20001);
    PRAGMA EXCEPTION_INIT(oceny_nie_znalezione, -20002);
    PRAGMA EXCEPTION_INIT(zero_wyjatek, -20003);

    v_nowa_ocena INTEGER := p_ocena;
    v_nowy_srednia NUMBER;
    v_id_recenzji recenzja_filmu_i_serialu.id_recenzji%TYPE;

BEGIN
    BEGIN
        SELECT recenzja_filmu_i_serialu_seq.NEXTVAL INTO v_id_recenzji FROM DUAL;
        IF v_id_recenzji IS NULL THEN
            RAISE id_recenzji_nie_znalezione;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie udało się pobrać nowego ID recenzji.');
            RAISE id_recenzji_nie_znalezione;
    END;

    BEGIN
        IF v_nowa_ocena < 0 THEN
            RAISE zero_wyjatek;
        END IF;

        INSERT INTO recenzja_filmu_i_serialu(id_recenzji, filmy_i_seriale_id_f_s, ocena)
        VALUES (v_id_recenzji, p_id_filmu, v_nowa_ocena);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd podczas dodawania nowej oceny: ' || SQLERRM);
            RAISE oceny_nie_znalezione;
    END;

    BEGIN
        SELECT AVG(ocena) INTO v_nowy_srednia
        FROM recenzja_filmu_i_serialu
        WHERE filmy_i_seriale_id_f_s = p_id_filmu;

        IF v_nowy_srednia IS NULL THEN
            RAISE oceny_nie_znalezione;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono ocen dla danego filmu.');
            RAISE oceny_nie_znalezione;
        WHEN zero_wyjatek THEN
            DBMS_OUTPUT.PUT_LINE('Ocena mniejsza niż zero.');
            RAISE zero_wyjatek;
    END;

    DBMS_OUTPUT.PUT_LINE('Dodano nową ocenę:');
    DBMS_OUTPUT.PUT_LINE('ID Recenzji: ' || v_id_recenzji);
    DBMS_OUTPUT.PUT_LINE('ID Filmu: ' || p_id_filmu);
    DBMS_OUTPUT.PUT_LINE('Nowa Ocena: ' || v_nowa_ocena);
    DBMS_OUTPUT.PUT_LINE('Nowa Średnia Ocena Filmu (ID ' || p_id_filmu || '): ' || v_nowy_srednia);

EXCEPTION
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd typu VALUE_ERROR: ' || SQLERRM);
    WHEN id_recenzji_nie_znalezione THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd przy pobieraniu nowego ID recenzji.');
    WHEN oceny_nie_znalezione THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd przy dodawaniu nowej oceny lub obliczaniu średniej.');
    WHEN zero_wyjatek THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: Ocena mniejsza niż zero.');
    END dodaj_ocene_i_srednia;

    PROCEDURE usun_film(p_id_f_s NUMBER) IS
        BEGIN
    BEGIN
        DELETE FROM WYPOZYCZENIA WHERE FILMY_I_SERIALE_ID_F_S = p_id_f_s;
		DELETE FROM TRANSAKCJE WHERE WYPOZYCZENIA_ID_W = p_id_f_s;
        DELETE FROM FILMY_I_SERIALE WHERE ID_F_S = p_id_f_s;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN

            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLERRM);
        END;

    END usun_film;

PROCEDURE wypozyczenia_filmu (
    p_klient_id INT,
    p_film_id INT
)
AS
    TYPE WypozyczeniaCollection IS TABLE OF wypozyczenia%ROWTYPE;
    v_wypozyczenia_list WypozyczeniaCollection := WypozyczeniaCollection();
    v_error_message VARCHAR2(4000);
    v_liczba_wypozyczen NUMBER;
    czy_pelnoletni BOOLEAN;
    v_wiek_ograniczenia INT;
    v_wiek_uzytkownika INT;
    v_wynik VARCHAR2(100);
    v_cena NUMBER;
    v_id_wypozyczenia INTEGER;
    v_srednia_ocena NUMBER;
    v_data_oddania DATE;
    v_id_gatunku INTEGER;  -- Dodane pole dla ID gatunku
    v_nazwa_gatunku VARCHAR2(100);  -- Dodane pole dla nazwy gatunku
    v_id_pakietu INTEGER; -- Dodane pole dla ID pakietu
    v_result INTEGER; -- Dodana deklaracja zmiennej

BEGIN
    -- Pobranie ID gatunku filmu/serialu
    BEGIN
        SELECT gatunek_id_gatunku INTO v_id_gatunku
        FROM filmy_i_seriale
        WHERE id_f_s = p_film_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_error_message := 'Nie ma filmu o podanym ID. Spróbuj wypożyczyć inny film.';
            DBMS_OUTPUT.PUT_LINE(v_error_message);
            RAISE_APPLICATION_ERROR(-20001, v_error_message);
            RETURN;
    END;

    -- Pobranie nazwy gatunku filmu/serialu
    BEGIN
        SELECT nazwa INTO v_nazwa_gatunku
        FROM gatunek
        WHERE id_gatunku = v_id_gatunku;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono nazwy gatunku dla danego filmu/serialu.');
            RETURN;
    END;

    -- Sprawdzenie wiekowej ograniczenia filmu
    BEGIN
        SELECT wiek_ograniczenia INTO v_wiek_ograniczenia
        FROM gatunek
        WHERE id_gatunku = v_id_gatunku;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono wiekowego ograniczenia dla danego gatunku.');
            RETURN;
    END;

    IF v_wiek_ograniczenia = 18 THEN
        -- Sprawdzenie, czy użytkownik jest pełnoletni
        BEGIN
            SELECT wiek INTO v_wiek_uzytkownika
            FROM klient
            WHERE id_klienta = p_klient_id;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                v_error_message := 'Nie ma takiego klienta. Spróbuj wybrać inne ID klienta.';
                DBMS_OUTPUT.PUT_LINE(v_error_message);
                RAISE_APPLICATION_ERROR(-20001, v_error_message);
                RETURN;
        END;

        czy_pelnoletni := SprawdzCzyUzytkownikPelnoletni(p_klient_id);

        IF NOT czy_pelnoletni THEN
            v_error_message := 'Użytkownik nie jest pełnoletni. Wypożyczenie nie jest możliwe.';
            DBMS_OUTPUT.PUT_LINE(v_error_message);
            RAISE_APPLICATION_ERROR(-20001, v_error_message);
        END IF;

        IF v_wiek_uzytkownika < 18 THEN
            v_error_message := 'Film jest przeznaczony dla osób pełnoletnich. Wypożyczenie nie jest możliwe.';
            DBMS_OUTPUT.PUT_LINE(v_error_message);
            RAISE_APPLICATION_ERROR(-20001, v_error_message);
        END IF;
    END IF;

    -- Pobranie liczby wypożyczeń dla klienta
    v_liczba_wypozyczen := ZwrocLiczbeWypozyczen(p_klient_id);

    -- Wywołanie funkcji zmieniającej pakiet po wypożyczeniu
    IF v_liczba_wypozyczen > 5 THEN
        v_wynik := ZmianaPakietuPoWypozyczeniu(p_klient_id);
    END IF;

    -- Pobranie ceny z tabeli filmy_i_seriale
    BEGIN
        SELECT cena INTO v_cena
        FROM filmy_i_seriale
        WHERE id_f_s = p_film_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono ceny dla danego filmu/serialu.');
            RETURN;
    END;

    -- Pobranie kolejnego dostępnego id_wypozyczenia
    BEGIN
        SELECT MAX(id_wypozyczenia) + 1 INTO v_id_wypozyczenia FROM wypozyczenia;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Błąd podczas pobierania ID wypożyczenia.');
            RETURN;
    END;

    -- Jeśli v_id_wypozyczenia jest NULL, ustaw na 1
    IF v_id_wypozyczenia IS NULL THEN
        v_id_wypozyczenia := 1;
    END IF;

    -- Wstawienie rekordu wypożyczenia do tabeli
    BEGIN
        INSERT INTO wypozyczenia (id_wypozyczenia, klient_id_klienta, administrator_id_ad, filmy_i_seriale_id_f_s, data_wypozyczenia, data_oddania, kwota_koncowa, rodzaj_platnosci_id_p)
        VALUES (v_id_wypozyczenia, p_klient_id, 1, p_film_id, SYSDATE, SYSDATE + 14, v_cena, 1);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Błąd podczas wstawiania rekordu wypożyczenia.');
            RETURN;
    END;

    -- Wynik wstawiania rekordu wypożyczenia
    DBMS_OUTPUT.PUT_LINE('Dodałeś/aś film/serial do swojej listy wypożyczeń');

    -- Informacje o filmie
    DBMS_OUTPUT.PUT_LINE('/**Informacje o twoim filmie/serialu:**\');
    DBMS_OUTPUT.PUT_LINE('Cena przed rabatem: ' || v_cena);
    DBMS_OUTPUT.PUT_LINE('Data oddania: ' || (SYSDATE + 14));

    -- Przerwa
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE(' ');

    -- Obliczanie średniej oceny filmu
    BEGIN
        v_srednia_ocena := ObliczSredniaOceneFilmu(p_film_id);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Błąd podczas obliczania średniej oceny filmu.');
            RETURN;
    END;

    IF v_srednia_ocena IS NOT NULL AND v_srednia_ocena >= 0 THEN
        DBMS_OUTPUT.PUT_LINE('Średnia ocena filmu: ' || v_srednia_ocena);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Brak danych lub błąd przy obliczaniu średniej oceny.');
    END IF;

    -- Informacje o gatunku i popularności
    DBMS_OUTPUT.PUT_LINE('Gatunek: ' || v_nazwa_gatunku);
    DBMS_OUTPUT.PUT_LINE('Popularność tego gatunku wynosi: ' || popularnosc_gatunku(v_id_gatunku));

    -- Przerwa
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE(' ');

    -- Informacje o koncie
    DBMS_OUTPUT.PUT_LINE('/**Informacje o twoim koncie:**\');
    DBMS_OUTPUT.PUT_LINE('Inne wypożyczone filmy');
    BEGIN
        SELECT * BULK COLLECT INTO v_wypozyczenia_list
        FROM wypozyczenia
        WHERE klient_id_klienta = p_klient_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Brak informacji o wypożyczeniach dla danego klienta.');
            RETURN;
    END;

    -- Wyświetlenie informacji o wszystkich wypożyczonych filmach/serialach
    FOR i IN 1..v_wypozyczenia_list.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('Wypożyczony film/serial ' || i || ': ' || v_wypozyczenia_list(i).filmy_i_seriale_id_f_s);
        -- Dodaj dodatkowe informacje o wypożyczeniach, jeśli są potrzebne
    END LOOP;

    -- Wynik funkcji zmieniającej pakiet po wypożyczeniu
    v_wynik := ZmianaPakietuPoWypozyczeniu(p_klient_id);
    DBMS_OUTPUT.PUT_LINE(v_wynik);

    -- Dodanie klienta do grupy rabatowej i aktualizacja ceny z rabatem
    BEGIN
        -- Pobranie id_pakietu klienta
        BEGIN
            SELECT id_pakietu INTO v_id_pakietu
            FROM klient
            WHERE id_klienta = p_klient_id;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('Nie znaleziono pakietu klienta.');
                RETURN;
        END;

        -- Sprawdzenie, czy klient ma pakiet o id równym 1
        IF v_id_pakietu = 1 THEN
            v_result := dodaj_klienta_do_grupy(p_klient_id);

            -- Aktualizacja ceny z rabatem
            IF v_result = 1 THEN
                BEGIN
                    v_result := aktualizuj_cene_filmu_z_rabatem(p_id_filmu => p_film_id, p_nowa_cena => 30, p_id_klienta => p_klient_id);
                    DBMS_OUTPUT.PUT_LINE('Twoja cena została zaktualizowana z rabatem dla stałego klienta.');
                    COMMIT;
                EXCEPTION
                    WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('Błąd podczas aktualizacji ceny z rabatem.');
                        RETURN;
                END;
            END IF;
        END IF;
    END;

    -- Pobranie zaktualizowanej kwoty po rabacie
    BEGIN
        SELECT kwota_koncowa INTO v_cena
        FROM wypozyczenia
        WHERE id_wypozyczenia = v_id_wypozyczenia;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono kwoty koncowej po rabacie.');
            RETURN;
    END;

    -- Wyświetlenie zaktualizowanej kwoty
    DBMS_OUTPUT.PUT_LINE('Zaktualizowana cena po rabacie: ' || v_cena);

    COMMIT;
END;
PROCEDURE zarzadzanie(
    p_id_recenzji INTEGER, 
    p_email VARCHAR2, 
    p_nowy_adres_email VARCHAR2,
    p_nowy_adres VARCHAR2,
    p_nowy_opis VARCHAR2,
    p_nazwa_gatunku VARCHAR2,
    p_wiek_ograniczenia INTEGER
) AS
    v_id_filmu INTEGER;
    v_tytul VARCHAR2(60 CHAR);
    v_opis VARCHAR2(1000 CHAR);
    v_cursor SYS_REFCURSOR;
    v_uzytkownik_rec klient%ROWTYPE;
    v_wynik INTEGER;
    wypozyczenie INTEGER;
    v_cena NUMBER;
    v_nowy_limit INTEGER := 80; 
    v_dodany_do_grupy INTEGER;
    v_liczba_zaktualizowanych INTEGER;
    v_id_gatunku INTEGER;
    v_id_klienta INTEGER; 
    v_kara NUMBER;
    v_data_wypozyczenia DATE; 
    v_data_oddania DATE;   
    wypozyczenia_ids SYS_REFCURSOR;

    klient_nieznaleziony EXCEPTION;
    brak_adresu_klienta EXCEPTION;
    email_nieznaleziony EXCEPTION;
    haslo_nieznalezione EXCEPTION;
    brak_adresu EXCEPTION;
    cena_nieznaleziona EXCEPTION;
    limit_nieznaleziony EXCEPTION;
    kara_nieznaleziona EXCEPTION;
    gatunek_nieznaleziony EXCEPTION;
 	blad_aktualizacji EXCEPTION;

BEGIN
    -- Znajdź filmy z daną recenzją
    v_cursor := ZnajdzFilmyZDanaRecenzja(p_id_recenzji);
    LOOP
        FETCH v_cursor INTO v_id_filmu, v_tytul, v_opis;
        EXIT WHEN v_cursor%NOTFOUND;
    END LOOP;
    CLOSE v_cursor;

    -- Znajdź użytkownika po emailu
    BEGIN
        v_cursor := ZnajdzUzytkownikaPoEmailu(p_email);
        FETCH v_cursor INTO v_uzytkownik_rec;
        CLOSE v_cursor;

        IF v_uzytkownik_rec.id_klienta IS NULL THEN
            RAISE email_nieznaleziony;
        END IF;
    EXCEPTION
        WHEN email_nieznaleziony THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono użytkownika o podanym emailu.');
            RETURN;
    END;

   
    DBMS_OUTPUT.PUT_LINE('***/INFORMACJE ZNALEZIONEGO KLIENTA\***');
    DBMS_OUTPUT.PUT_LINE('ID użytkownika: ' || v_uzytkownik_rec.id_klienta);
    DBMS_OUTPUT.PUT_LINE('Nazwa użytkownika: ' || v_uzytkownik_rec.imie || ' ' || v_uzytkownik_rec.nazwisko);

    -- Aktualizacja e-maila użytkownika
    zmien_email_uzytkownika(v_uzytkownik_rec.id_klienta, p_nowy_adres_email);

    -- Sprawdzenie hasła użytkownika
    BEGIN
        sprawdz_haslo(v_uzytkownik_rec.id_klienta);
    EXCEPTION
        WHEN haslo_nieznalezione THEN
            DBMS_OUTPUT.PUT_LINE('Hasło nie zostało znalezione.');
            RETURN;
    END;

    -- Zmiana adresu użytkownika
    BEGIN
        v_liczba_zaktualizowanych := zmien_adres_uzytkownika2(v_uzytkownik_rec.id_klienta, p_nowy_adres);

        IF v_liczba_zaktualizowanych > 0 THEN
            DBMS_OUTPUT.PUT_LINE('Adres zaktualizowany dla ' || v_liczba_zaktualizowanych || ' klienta.');
            DBMS_OUTPUT.PUT_LINE('Nowy adres: ' || p_nowy_adres);
        ELSIF v_liczba_zaktualizowanych = 0 THEN
            RAISE brak_adresu_klienta;
        ELSE
            RAISE blad_aktualizacji;
        END IF;
    EXCEPTION
        WHEN brak_adresu_klienta THEN
            DBMS_OUTPUT.PUT_LINE('Brak klienta o podanym ID.');
            RETURN;
        WHEN blad_aktualizacji THEN
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd podczas aktualizacji adresu.');
            RETURN;
    END;

   
    DBMS_OUTPUT.PUT_LINE('***/WPROWADZONE ZMIANY DLA ZNALEZIONEGO KLIENTA\***');
    v_dodany_do_grupy := dodaj_klienta_do_grupy(v_uzytkownik_rec.id_klienta);

    -- Aktualizacja ceny filmu z rabatem
    v_wynik := aktualizuj_cene_filmu_z_rabatem(p_id_filmu => v_id_filmu, p_nowa_cena => 30, p_id_klienta => v_uzytkownik_rec.id_klienta);

    -- Zwiększenie limitu wypożyczeń
    BEGIN
        zwieksz_limit_wypozyczen(p_id_klienta => v_uzytkownik_rec.id_klienta, p_nowy_limit => v_nowy_limit);
        DBMS_OUTPUT.PUT_LINE('Zaktualizowany limit wypożyczeń: ' || v_nowy_limit);
    EXCEPTION
        WHEN limit_nieznaleziony THEN
            DBMS_OUTPUT.PUT_LINE('Limit wypożyczeń nie został znaleziony.');
            RETURN;
    END;

    DBMS_OUTPUT.PUT_LINE('***/WPROWADZONE ZMIANY DLA FILMU KLIENTA\***');

    -- Aktualizacja opisu filmu
    BEGIN
        AktualizujOpisFilmu(v_id_filmu, p_nowy_opis);
        DBMS_OUTPUT.PUT_LINE('Zaktualizowany opis filmu lub serialu: ' || p_nowy_opis);
    EXCEPTION
        WHEN brak_adresu THEN
            DBMS_OUTPUT.PUT_LINE('Adres nie został znaleziony.');
            RETURN;
    END;

    -- Sprawdzenie kary za opóźniony zwrot
    OPEN wypozyczenia_ids FOR
        SELECT id_wypozyczenia, kwota_koncowa, data_wypozyczenia, data_oddania
        FROM wypozyczenia
        WHERE FILMY_I_SERIALE_ID_F_S = v_id_filmu
          AND klient_id_klienta = v_uzytkownik_rec.id_klienta
          AND data_oddania - data_wypozyczenia > 14;

    BEGIN
        LOOP
            FETCH wypozyczenia_ids INTO wypozyczenie, v_cena, v_data_wypozyczenia, v_data_oddania;
            EXIT WHEN wypozyczenia_ids%NOTFOUND;

            DBMS_OUTPUT.PUT_LINE('Różnica między data_oddania a data_wypozyczenia: ' || (v_data_oddania - v_data_wypozyczenia));

            v_kara := nalicz_kare(wypozyczenie);

            IF v_kara > 0 THEN
                DBMS_OUTPUT.PUT_LINE('Naliczono karę za opóźniony zwrot dla klienta ' || v_uzytkownik_rec.id_klienta);
                DBMS_OUTPUT.PUT_LINE('Naliczona kara wynosi: ' || v_kara);
            END IF;
        END LOOP;
    EXCEPTION
        WHEN kara_nieznaleziona THEN
            DBMS_OUTPUT.PUT_LINE('Kara nie została znaleziona.');
            RETURN;
    END;

    CLOSE wypozyczenia_ids;

    -- Dodanie nowego gatunku automatycznie
    BEGIN
        dodaj_nowy_gatunek_automatycznie(p_nazwa_gatunku, p_wiek_ograniczenia);
    EXCEPTION
        WHEN gatunek_nieznaleziony THEN
            DBMS_OUTPUT.PUT_LINE('Gatunek nie został znaleziony.');
            RETURN;
    END;

EXCEPTION
    WHEN klient_nieznaleziony THEN
        DBMS_OUTPUT.PUT_LINE('Nie znaleziono klienta.');
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Nie znaleziono danych.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLCODE || ' - ' || SQLERRM);
END zarzadzanie;
END PAKIET;
/

CREATE OR REPLACE PACKAGE zarzadzanie_uzytkownikami AS
  -- Funkcje

  FUNCTION ZwrocLiczbeWypozyczen(id_klienta INT) RETURN INT;

  FUNCTION ZnajdzUzytkownikaPoEmailu(email VARCHAR2) RETURN SYS_REFCURSOR;

  FUNCTION SprawdzCzyUzytkownikPelnoletni(id_klienta INT) RETURN BOOLEAN;

  FUNCTION dodaj_klienta_do_grupy(p_id_klienta INTEGER) RETURN INTEGER;

  FUNCTION nalicz_kare(wypozyczenie_id INTEGER) RETURN INTEGER;

  FUNCTION zmien_adres_uzytkownika2(p_id_klienta INTEGER, p_nowy_adres VARCHAR2) RETURN INTEGER;

  -- Procedury

  PROCEDURE zmien_email_uzytkownika(p_id_klienta INTEGER, p_nowy_adres_email VARCHAR2);

  PROCEDURE pobierz_informacje_klienta(p_id_klienta INTEGER);

  PROCEDURE dodaj_nowego_klienta(
    p_imie VARCHAR2,
    p_nazwisko VARCHAR2,
    p_wiek INTEGER,
    p_nr_telefonu INTEGER,
    p_email VARCHAR2,
    p_ulica VARCHAR2,
    p_adres_kod_pocztowy VARCHAR2,
    p_id_pakietu INTEGER
  );

  PROCEDURE sprawdz_haslo(p_id_klienta INTEGER);
END zarzadzanie_uzytkownikami;
/

CREATE OR REPLACE PACKAGE BODY zarzadzanie_uzytkownikami AS
  -- Funkcje

  FUNCTION ZwrocLiczbeWypozyczen(id_klienta INT) RETURN INT IS
    klient_nie_znaleziony EXCEPTION;
    bledna_wartosc EXCEPTION;
    PRAGMA EXCEPTION_INIT(klient_nie_znaleziony, -20001);
    PRAGMA EXCEPTION_INIT(bledna_wartosc, -20002);

    liczba_wypozyczen INT;
  BEGIN
    -- Implementacja funkcji...
  END ZwrocLiczbeWypozyczen;

  FUNCTION ZnajdzUzytkownikaPoEmailu(email VARCHAR2) RETURN SYS_REFCURSOR IS
    result_cursor SYS_REFCURSOR;
  BEGIN
    -- Implementacja funkcji...
  END ZnajdzUzytkownikaPoEmailu;

  FUNCTION SprawdzCzyUzytkownikPelnoletni(id_klienta INT) RETURN BOOLEAN IS
    klient_nieznaleziony EXCEPTION;
    PRAGMA EXCEPTION_INIT(klient_nieznaleziony, -20001);

    czy_pelnoletni BOOLEAN;
    wiek_klienta INTEGER;
  BEGIN
    -- Implementacja funkcji...
  END SprawdzCzyUzytkownikPelnoletni;

  FUNCTION dodaj_klienta_do_grupy(p_id_klienta INTEGER) RETURN INTEGER IS
    brak_danych EXCEPTION;
    PRAGMA EXCEPTION_INIT(brak_danych, -20001);

    TYPE grupy_rabatowe_klienci IS TABLE OF INTEGER;
    v_grupa_rabatowa grupy_rabatowe_klienci := grupy_rabatowe_klienci();
  BEGIN
    -- Implementacja funkcji...
  END dodaj_klienta_do_grupy;

  FUNCTION nalicz_kare(wypozyczenie_id INTEGER) RETURN INTEGER IS
    brak_danych EXCEPTION;
    id_null EXCEPTION;
    PRAGMA EXCEPTION_INIT(brak_danych, -20001);
    PRAGMA EXCEPTION_INIT(id_null, -20002);
  BEGIN
    -- Implementacja funkcji...
  END nalicz_kare;

  FUNCTION zmien_adres_uzytkownika2(p_id_klienta INTEGER, p_nowy_adres VARCHAR2) RETURN INTEGER IS
    brak_danych EXCEPTION;
    id_null EXCEPTION;
    PRAGMA EXCEPTION_INIT(brak_danych, -20001);
    PRAGMA EXCEPTION_INIT(id_null, -20002);
  BEGIN
    -- Implementacja funkcji...
  END zmien_adres_uzytkownika2;

  -- Procedury

  PROCEDURE zmien_email_uzytkownika(p_id_klienta INTEGER, p_nowy_adres_email VARCHAR2) IS
    brak_uzytkownika EXCEPTION;
    inny_blad EXCEPTION;
    PRAGMA EXCEPTION_INIT(brak_uzytkownika, -20001);
    PRAGMA EXCEPTION_INIT(inny_blad, -20002);
  BEGIN
    -- Implementacja procedury...
  END zmien_email_uzytkownika;

  PROCEDURE pobierz_informacje_klienta(p_id_klienta INTEGER) IS
    brak_uzytkownika EXCEPTION;
    PRAGMA EXCEPTION_INIT(brak_uzytkownika, -20001);
  BEGIN
    -- Implementacja procedury...
  END pobierz_informacje_klienta;

  PROCEDURE dodaj_nowego_klienta(
    p_imie VARCHAR2,
    p_nazwisko VARCHAR2,
    p_wiek INTEGER,
    p_nr_telefonu INTEGER,
    p_email VARCHAR2,
    p_ulica VARCHAR2,
    p_adres_kod_pocztowy VARCHAR2,
    p_id_pakietu INTEGER
  ) IS
    brak_id_klienta EXCEPTION;
    PRAGMA EXCEPTION_INIT(brak_id_klienta, -20001);
    v_id_klienta INTEGER;
  BEGIN
    -- Implementacja procedury...
  END dodaj_nowego_klienta;

  PROCEDURE sprawdz_haslo(p_id_klienta INTEGER) IS
    brak_klienta EXCEPTION;
    PRAGMA EXCEPTION_INIT(brak_klienta, -20001);
    v_haslo VARCHAR2(50 CHAR);
    v_error_message VARCHAR2(100);
  BEGIN
    -- Implementacja procedury...
  END sprawdz_haslo;
END zarzadzanie_uzytkownikami;
/

